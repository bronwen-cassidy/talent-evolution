// start population functions

function showCriteriaTree(index, title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    setTempIndex(index);
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'criteriaSelected()', allowClear);
}

function setTempIndex(index) {
    var frm = document.forms['temp'];
    frm.index.value = index;
}

function getTempIndex() {
    var frm = parent.document.forms['temp'];
    return frm.index.value;
}

function criteriaSelected() {

    var frm = parent.document.forms['population'];
    frm.index.value = getTempIndex();
    frm.action = '?_target1=1';
    frm.submit();
}

function removeLine(criteriaIndex) {
    var frm = document.forms['population'];
    frm.index.value = criteriaIndex;
    frm.action = '?_target2=2';
    frm.submit();
}

function addLine() {
    var frm = document.forms['population'];
    frm.action = '?_target1=1';
    frm.submit();
}
// end population functions

// start formula functions
function addOperand() {
   submitFormToTarget('function', '_target7', '7', 'pgTarget');
}

function saveFormula() {
    submitFormToTarget('function', '_target9', '9', 'pgTarget');
}

function editFormula(index) {
    submitTabularReportForm(index, '6');
}

function showFormulaTree(index, title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    setTempIndex(index);
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear);
}


function removeOperand(criteriaIndex) {
    submitFormToTarget('function', '_target8', '8', 'pgTarget','selectedColumnIndex',criteriaIndex);
}

// end formula functions

// crosstab report functions
function showHideRows(tableId, linkElem) {
    var tableVar = getElemById(tableId);
    // get the rows for the table looking for class hideable
    var hideableClass = "hideable";
    var rows = tableVar.getElementsByTagName("tr");
    var i;
    var found = 0;
    for(i = 0; i < rows.length; i++) {
        var row = rows[i];
        if(row.className == hideableClass) {
            if(row.style.display == "none") {
                row.style.display = "";
                found = 0;
            } else {
                row.style.display = "none";
                found = 1;
            }
        }
    }

    // set the link text
    var child = linkElem.firstChild;
    if (child != null) {
        if(found == 0) {
            child.src = "../images/minus.gif";
        } else {
            child.src = "../images/plus.gif";
        }
    }
}

// end crosstab report functions

// start metric functions
function showMetricCriteriaTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear);
}

function showCountMetricCriteriaTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'metricCriteriaSelected()', allowClear);
}

function metricCriteriaSelected() {
    var frm = parent.document.forms['metric'];
    // get the hidden field representing the target to submit to
    var hidFld = getElemByIdAndDoc('pgTarget', parent.document);
    hidFld.name = "_target2";
    hidFld.value = "2";
    frm.submit();
}

// end metric functions

// start report functions
function showColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear, displayFieldId);
}

// end report functions

function submitFormToTarget(frmName, targetNme, targetVal, targetElemId, hidFieldId, hidFldVal, hidFldNme) {
    var frm = document.forms[frmName];
    var targetElem = getElemById(targetElemId);
    targetElem.name=targetNme;
    targetElem.value=targetVal;

    if (hidFieldId != null)
    {
        var target = getElemById(hidFieldId);
        if (target != null) target.value= hidFldVal;
        if (hidFldNme != null) target.name=hidFldNme;
    }

    frm.submit();
}

function handleWizardBack(frmName, targetId, targetVal, backElemId) {
    var frm = document.forms[frmName];
    var targetElem = getElemById(targetId);
    targetElem.name="_target" + targetVal;
    targetElem.value=targetVal;

    var backElem = getElemById(backElemId);
    backElem.name = "_back";
    backElem.value = "_back";

    frm.submit();
}

// start of tabular report functions

function showTabularColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'tabularColumnSelected()', allowClear, displayFieldId);
}

function showChartColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear, displayFieldId);
}

function tabularColumnSelected() {

    var doc = parent.document;

    var targetNme = '_target1';
    var targetVal = '1';
    var targetElemId = 'pgTarget';
    var formName = 'reports';

    var frm = doc.forms[formName];
    var targetElem = getElemByIdAndDoc(targetElemId, doc);
    targetElem.name=targetNme;
    targetElem.value=targetVal;
    frm.submit();
}

function appraisalReportColumnSelected(sourceId, targetId) {
    var sourceElem = getElemById(sourceId);
    var targetElem = getElemById(targetId);
    targetElem.value = sourceElem.value;
}

function addTabularReportFormula() {
    submitFormToTarget('reports', '_target5', '5', 'pgTarget');
}

function addTabularReportColumn() {
	submitTabularReportForm('0', '1');
}

function deleteTabularReportColumn(index) {
    submitTabularReportForm(index, '4');
}

function deleteChartReportColumn(index) {
    var indexField = getElemById('deletedColumnIndex');
    indexField.value= index;        
    submitFormToTarget('reports', '_target1', '1', 'pgTarget');
}

function submitTabularReportForm(index, pageTargetValue) {
    var indexField = getElemById('selectedColumnIndex');
    indexField.value= index;
    var pageTargetName = "_target" + pageTargetValue;
    submitFormToTarget('reports', pageTargetName, pageTargetValue, 'pgTarget');
}

function populateReportPdfFields(){
    var frm = document.forms['_reportpdfexport'];
    // if this is a drilldown report there is no population select so this is null.
    var elem1 = getElemById('pop2');
    var elem2 = getElemById('ob2');
    var elem3 = getElemById('so2');

    var field1 = getElemById('pop_id2');
    var field2 = getElemById('ob2');
    var field3 = getElemById('so2');

    // ignore setting this field if it is a drilldown report
    if (elem1 != null) {
        assignMultiSelectElem(elem1, field1);
    }

    // order by may be null
    var orderBy = null;
    try {
        orderBy = elem2.options[elem2.selectedIndex].value;
    } catch (e) {}

    if (orderBy != null) {
        field2.value = orderBy;
    }

    field3.value = elem3.options[elem3.selectedIndex].value;

    frm.submit();
}
function populateCsvFields() {
    var frm = document.forms['_csvexport'];
    // if this is a drilldown report there is no population select so this is null.

    var elem1 = getElemById('pop2');
    var elem2 = getElemById('ob2');
    var elem3 = getElemById('so2');

    var field1 = getElemById('pop_id1');
    var field2 = getElemById('ob1');
    var field3 = getElemById('so1');

    // ignore setting this field if it is a drilldown report
    if (elem1 != null) {
        assignMultiSelectElem(elem1, field1);
    }

    // order by may be null
    var orderBy = null;
    try {
        orderBy = elem2.options[elem2.selectedIndex].value;
    } catch (e) {}

    if (orderBy != null) {
        field2.value = orderBy;
    }

    field3.value = elem3.options[elem3.selectedIndex].value;

    frm.submit();
}

function assignMultiSelectElem(elem1, field1) {
    var output = "";
    for(var i = 0; i < elem1.options.length; i++)
    if(elem1.options[i].selected) {
        output += elem1.options[i].value + ",";
    }
    // delete the last ,
    if(output.length > 0) {
        output = output.replace(/,$/,"");
    }
    field1.value = output;
}

function selectTabularReportColumnColour(index) {
    submitTabularReportForm(index, '2');
}

function popUpShowColourPicker(title, buttonId, popupId) {
    var popupRoot = getElemById(buttonId);
    popupShow(title, popupRoot, popupId);
}

//title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear
function popupShowBlog(title, buttonId, popupId, partnerValId, partnerKeyId) {
    var popupRoot = getElemById(buttonId);
    popupShow(title, popupRoot, popupId, partnerValId, partnerKeyId, null, false);
}

function saveColours() {
    submitFormToTarget('reports', '_target3', '3', 'pgTarget');
}

function saveComment(paragraphFieldId, textAreaElemId) {
    // prepend the saved info to the paragraph tag selected
    var textAreaElem = getElemById(textAreaElemId);
    var paragraphElem = getElemById(paragraphFieldId);
    paragraphElem.innerHTML="<strong>" + textAreaElem.value + "</strong>";
}

// functions used when displaying legend after running a tabular report
function popupShowColourLegend(title, prefix, columnId, popupId) {
    var popupRoot = getElemById(prefix + columnId);
    popupShow(title, popupRoot, popupId);
}

function submitLegendForm(columnLinkPrefix, columnLinkIdValue, activeTabFieldId, activeTabValue) {
    var columnElem = getElemById('colx1');
    columnElem.value=columnLinkIdValue;
    if(activeTabFieldId != null) {
        var activeTabElem = getElemById(activeTabFieldId);
        activeTabElem.value = activeTabValue;
    }
    var popupIdPrefix = getElemById('popupIdPrefix');
    popupIdPrefix.value=columnLinkPrefix;
    submitFormToTarget('runreport', '_target1', '1', 'pgTarget');
}

function submitChartToTarget(targetNum, formName, targetId) {
    submitFormToTarget(formName, '_target' + targetNum, targetNum, targetId);
}

function submitChartFormValues(frmName, hiddenFldId, hiddenFldValue, indexHiddenFldId, indexFldValue) {
    var frm = document.forms[frmName];
    var hiddenFieldElem = getElemById(hiddenFldId);
    hiddenFieldElem.value = hiddenFldValue;
    if(indexHiddenFldId != null) {
    var indexElem = getElemById(indexHiddenFldId);
    indexElem.value = indexFldValue;
    }
    frm.submit();
}

function handleReportPageSubmit(pgStartId, pgNum, frmName) {
    var pageStartFld = getElemById(pgStartId);
    pageStartFld.value = pgNum;
    var frm = document.forms[frmName];
    frm.submit();
}

// end of tabular report functions
var PORTFOLIO_ITEM_UPLOAD_TEXT = 'TEXT';
var PORTFOLIO_ITEM_URL = 'URL';
var PORTFOLIO_ITEM_UPLOAD = 'UPLOAD';
var PORTFOLIO_ITEM_NONE = '';

function onContentSubTypeSelect(selectId) {

    var selectDropDown = document.getElementById(selectId);

    for (var i = 0; i < selectDropDown.options.length; i++) {
        if (selectDropDown.options[i].selected) {
            var type = selectDropDown.options[i].value;
            activateSubTypeSelection(type);
            break
        }
    }

}

function activateSubTypeSelection(type) {
    var textElem = document.getElementById("portfolioItemText");
    var urlElem = document.getElementById("portfolioItemUrl");
    var uploadElem = document.getElementById("portfolioItemUpload");

    if (type == PORTFOLIO_ITEM_UPLOAD_TEXT) {
        textElem.style.display = '';
        urlElem.style.display = 'none';
        uploadElem.style.display = 'none';

    } else if (type == PORTFOLIO_ITEM_URL) {
        textElem.style.display = 'none';
        urlElem.style.display = '';
        uploadElem.style.display = 'none';

    } else if (type == PORTFOLIO_ITEM_UPLOAD) {
        textElem.style.display = 'none';
        urlElem.style.display = 'none';
        uploadElem.style.display = '';

    } else if (type == PORTFOLIO_ITEM_NONE) {
        textElem.style.display = 'none';
        urlElem.style.display = 'none';
        uploadElem.style.display = 'none';
    }

}function setSearchStarted(formName)
{
	var form = document.forms[formName];
	form.searchStarted.value = 'true';
}

function initiateSearch(formName)
{
	var form = document.forms[formName];
	form.search_initiated.value = 'YES';
}// Functions for tabs in browsing artefact views

    function concatActiveTab(actionTabFieldId, firstParam){
        var concatToAction = "";
        if (actionTabFieldId != null)
        {
           var actionTabField = getElemById(actionTabFieldId);
           if (firstParam == null )
           {
               concatToAction = "&";
           }
           concatToAction =  concatToAction + actionTabFieldId + "=" + actionTabField.value ;
        }
        return concatToAction;
    }

    function setHiddenFromSelect(selectField, hiddenFieldId, formName, actionTabFieldId) {
        var tempElement = getElemById(hiddenFieldId);
        tempElement.value = selectField.options[selectField.selectedIndex].value;
        var frm = document.forms[formName];
        frm.action="?_target1=1" + concatActiveTab(actionTabFieldId);
        frm.submit();
    }

    function setHiddenFromButton(hiddenFieldId, fieldValue, formName, valTarget , actionTabFieldId) {
        if (valTarget == null )
        {
            valTarget = "_target2=2";
        }

        setHiddenFieldValue(hiddenFieldId, fieldValue);

        var frm = document.forms[formName];
        frm.action = "?" + valTarget + concatActiveTab(actionTabFieldId);
        frm.submit();
    }


    function setHiddenFromList(nodeId, hiddenFieldId, formName, actionTabFieldId) {

        setHiddenFieldValue(hiddenFieldId, nodeId);
        var frm = document.forms[formName];
        frm.action="?_target4=4"+ concatActiveTab(actionTabFieldId);
        frm.submit();
    }

    function setTargetAndSubmit(target, formName, actionTabFieldId) {

        var frm = document.forms[formName];
        if (target == null)
        {
            frm.action = frm.action + "?" + concatActiveTab(actionTabFieldId,'first');
        }
        else
        {
            frm.action="?" + target + concatActiveTab(actionTabFieldId);
        }
        frm.submit();
    }

    function handleSearchSubmit(target, formName, actionTabFieldId) {

        var frm = document.forms[formName];
        if (target == null)
        {
            frm.action = frm.action + "?" + concatActiveTab(actionTabFieldId,'first');
        }
        else
        {
            frm.action="?" + target + concatActiveTab(actionTabFieldId);
        }
        return true;
    }

     function copyActionTabAndSubmit(formName, actionTabFieldId, actionTabCopyFieldId ) {

        var frm = document.forms[formName];
        var actionTabField = getElemById(actionTabFieldId);
        var actionTabCopyField = getElemById(actionTabCopyFieldId);

        if(actionTabCopyField && actionTabField) {
            actionTabCopyField.value = actionTabField.value;
        }
        frm.submit();
    }

    function setHiddenFromSelectAndSubmit(formName, selectElem, hiddenFieldId) {
        var frm = document.forms[formName];
        var hiddenFld = getElemById(hiddenFieldId);
        hiddenFld.value = selectElem.options[selectElem.selectedIndex].value;
        frm.submit();
    }

    function setHiddenFieldValue(hiddenFieldId, value) {
        var tempElement = getElemById(hiddenFieldId);
        if (tempElement != null) tempElement.value = value;
    }

var targetFieldId = 'tarId';

function respondNotification(notificationId) {
    var frm = document.forms[notificationId];
    frm.submit();
}

function respondNotificationWarning(notificationId, message) {
    confirmActionAndPost(notificationId, message);        
}

function postQuestionnaireTarget(formElement) {
    var frm = document.forms[formElement];
    frm.submit();
}

function setHiddenValuesAndPost(formName, targetElemId, targetElemValue, hidFieldId, hidFldVal) {
    var targetName = '_target' + targetElemValue;
    submitFormToTarget(formName, targetName, targetElemValue, targetElemId, hidFieldId, hidFldVal);
}

function handleDeleteImage(actionElemId, actionElemValue) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '10', actionElemId, actionElemValue);
}

function setSelectedEvaluatorAnswers(selectAnswerOptions) {
    var selectedValue = selectAnswerOptions.options[selectAnswerOptions.selectedIndex].value;
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '7', 'selGroupId', selectedValue);
}

function submitViewObjective(selectedObjectiveId) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '9', 'selObjectiveId', selectedObjectiveId);
}

function addDynamicLineItem(index) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '11', 'deleteImage', index);
}

function deleteDynamicLineItem(id, index) {
    setHiddenField('deleteImage', index);
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '12', 'dlId', id);
}

function addBlogComment(index) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '13', 'deleteImage', index);
}

function republishQuestionnaire(queId) {
    $("#rep_" + queId).attr("disabled","disabled");
    $('.mask').addClass('ajax');
}// javascript file to handle functions for the dynamic attributes

// enable a checkbox
function enable(selectElem, checkBoxId) {

    var checkBoxElem = getElemById(checkBoxId);
    if (selectElem.options[selectElem.selectedIndex].value == 'DATE') {
        checkBoxElem.disabled = false;
    } else {
        checkBoxElem.disabled = true;
        checkBoxElem.checked = false;
    }
}

function updateCalculation(displayElemId, tableId) {

    var spanElem = getElemById(displayElemId);
    var targetTable = getElemById(tableId);
    var output = "Formula: ";
    // get each of the rows
    var cols = targetTable.getElementsByTagName("TD");
    for (var j = 0; j < cols.length; j++) {
        var col = cols[j];
        var elems = col.getElementsByTagName("*");
        for (var k = 0; k < elems.length; k++) {
            var elem = elems[k];
            if (elem.nodeName == "SELECT") {
                var selectedText = elem.options[elem.selectedIndex].text;
                if (selectedText != 'Please Select') output += selectedText + " ";
            } else if (elem.type == 'text') {
                output += elem.value + " ";
            }
        }
    }
    spanElem.innerHTML = output;
}

function clearSelectTextValue(elem) {
    if (elem.nodeName == 'SELECT') elem.selectedIndex = 0;
    else if (elem.type == 'text') elem.value = '';
}

function toggleEnabled(elem1Id, elem2Id, elem3Id, otherCheckboxId) {
    // find the clicked element different for ie and firefox
    var evt = window.event || arguments.callee.caller.arguments[0];
    var clickedElem = evt.target || evt.srcElement;

    var clickedElemName = clickedElem.name;
    // get the last character of the name it will give us the index to append
    var nameLength = clickedElemName.length - 1;

    var postFix = clickedElemName.charAt(nameLength);

    var other = getElemById(otherCheckboxId + postFix);
    other.checked = !clickedElem.checked;
    
    var elem1 = getElemById(elem1Id + postFix);
    var elem2 = getElemById(elem2Id + postFix);
    var elem3 = getElemById(elem3Id + postFix);

    elem1.disabled = !elem1.disabled;
    elem2.disabled = !elem2.disabled;
    elem3.disabled = !elem3.disabled;

    if (elem1.disabled) clearSelectTextValue(elem1);
    if (elem2.disabled) clearSelectTextValue(elem2);
    if (elem3.disabled) clearSelectTextValue(elem3);
}

function addRow(tableId, numExpFldId) {

    var tblBody = getElemById(tableId).tBodies[0];

    var hiddenElem = getElemById(numExpFldId);
    var index = hiddenElem.value;

    var newRow = tblBody.rows[0].cloneNode(true);

    // loop through the cells
    var newTds = newRow.getElementsByTagName("TD");

    // must match numCells and the length of new names
    for (var i = 0; i < newTds.length; i++) {
        var newTd = newTds[i];
        var cellElems = newTd.getElementsByTagName('*');
        for (var j = 0; j < cellElems.length; j++) {
            var currentElem = cellElems[j];
            if (currentElem.nodeName == 'INPUT' || currentElem.nodeName == 'SELECT') {
                // get the name and change the number to the index
                var currentElemName = currentElem.name;
                var currentElemId = currentElem.id;
                currentElem.setAttribute("name", currentElemName.replace('0', index));
                currentElem.setAttribute("id", currentElemId.replace('0', index));

                if (currentElem.nodeName == 'SELECT') {
                    currentElem.options[0].selected = 'true';
                    var formatSel = 'formatSelId' + index;
                    currentElem.disabled = (currentElem.id == formatSel);

                } else if (currentElem.type == 'text') {
                    currentElem.value = '';
                    currentElem.disabled = true;

                } else if (currentElem.type == 'checkbox') {
                    currentElem.checked = currentElem.id != ('txtChoice' + index);
                }
            }
        }
    }
    tblBody.appendChild(newRow);
    hiddenElem.value = parseInt(index) + 1;
}

// removes the last row in a table
function removeRow(tableId, numExpFldId) {

    // should have found the corrent element now
    var tableElem = getElemById(tableId);

    var rows = tableElem.getElementsByTagName('TR');
    var lastRowIndex = rows.length;
    if (lastRowIndex > 2) {
        tableElem.deleteRow(lastRowIndex - 1);
        // decrement the hidden elements value
        var hiddenElem = getElemById(numExpFldId);
        var index = hiddenElem.value;
        hiddenElem.value = parseInt(index) - 1;

    } else {
        alert("must have at least 2 attributes");
    }
}var popupId = 'helpText';
var popupTitleId = popupId + 'Title';
var popupIFrameId = popupId + 'Iframe';
var popupContentIFrameId = popupId + 'contentIframe';
var popupHiddenField = popupId + 'Field';
var textAreaElementId = 'helpTextAreaElementId';
var editing = false;
var itemIdElem = null;

var noHelpTextMessage = null;

var helpTextCallback = function(helpTextItem) {
    
    var divElem = getElemById(popupId + "Content");    
    var message;
    if(helpTextItem == null) {
        message = noHelpTextMessage;
    } else {
        message = helpTextItem.helpText;
    }
    if (editing) {
        var textElem = getElemById(textAreaElementId);
        textElem.value = message;
    } else {
        divElem.innerHTML=message;
    }
}

function showHelpText(itemId, noValueMessage, editVar) {
    editing = editVar;
    itemIdElem = itemId;
    noHelpTextMessage = noValueMessage;
    helpTextBean.getHelpTextItem(itemId, helpTextCallback);
}

function showHelpTextPopup(title, popupRoot) {
    popupShow(title, popupRoot, popupId);
}

function saveHelpText() {

    if(itemIdElem != null) {
        var textElem = getElemById(textAreaElementId);
        helpTextBean.setHelpText(itemIdElem, textElem.value);
        // now clear the text area
        textElem.value = "";
    }
}

function closePopup() {
    if (editing) {
        var textElem = getElemById(textAreaElementId);
        textElem.value = "";
    } else {
        divElem.innerHTML="";
    }
}

function markMessageAsRead(url, messageId) {
    // call the update and submit to the url
    messageItemBean.setMessageItemRead(messageId);
    window.location.href = url;
}

function confirmDeleteMessages(frmName, message) {

    var elems = document.getElementsByName("m_ids");
    var count = 0;
    for(var i = 0; i < elems.length; i++) {
        if(elems[i].checked) count = count + 1;
    }
    if (count > 0) {
        confirmActionAndPost(frmName, message);
    } else {
        alert("Please select the items to be deleted");
    }
}// objective specific functions

function addObjective() {
    var frm = document.forms['objsetfrmid'];
    var target = getElemById('targetId');
    target.name = "_target2";
    target.value = "_target2";
    frm.submit();
}

function removeObjective(objectiveIndex) {
    var frm = document.forms['objsetfrmid'];
    var target = getElemById('targetId');
    target.name = "_target3";
    target.value = "_target3";

    var deleteElem = getElemById('deleteIdx');
    deleteElem.value = objectiveIndex;
    frm.submit();
}

function submitCancel() {
    var frm = document.forms['objsetfrmid'];
    var hiddFld = getElemById('cancelId');
    hiddFld.name = "_cancel";
    hiddFld.value = "_cancel";
    frm.submit();
}

function hideElement(elemId) {
    var doc = parent.document;
    if (!doc) doc = document;
    var hiddenElem = getElemByIdAndDoc(elemId, doc, true);
    hiddenElem.style.display = 'none';
}

function showElement(hiddenDivId) {
    var doc = parent.document;
    if (!doc) doc = document;
    var hiddenElem = getElemByIdAndDoc(hiddenDivId, doc, true);
    hiddenElem.style.display = "inline";
}

function confirmSetValueAndSubmit(frm, message, hiddenFldId, value, finishFieldId) {
    var confirmed = confirm(message);
    if (confirmed == '1') {
        getElemById(hiddenFldId).value = value;
        if(finishFieldId) {
            var finishField = getElemById(finishFieldId);
            finishField.name="_finish";
            finishField.value="_finish";
        }
        document.forms[frm].submit();
    }
}

function setParentObjectiveInfo(listElementId, hiddenFieldId, targetAreaId, itemId) {
    // find the objective
    var listElem = getElemById("ab" + listElementId);
    var description = listElem.innerHTML;

    var hiddenField = getElemById(hiddenFieldId);
    hiddenField.value = listElementId;

    var targetAreaElem = getElemById(targetAreaId);
    targetAreaElem.innerHTML = description;

    var hiddenDescElem = getElemById(targetAreaId + "a");
    hiddenDescElem.value = description;
}

function swapLiStyle(elem, borderStyleName) {
    elem.style.borderStyle = borderStyleName;
}

function updateNumberField(targetId, sourceId) {
    var source = getElemById(sourceId);
    var target = getElemById(targetId);
    var num = target.innerHTML;
    if (num) {
        target.innerHTML = parseInt(num) + parseInt(source.value);
    } else {
        target.innerHTML = parseInt(source.value);
    }
}

var approveObjectiveCallback = function(success) {
    if (success) {
        alert("Successfully updated objective");
    } else {
        // display some error message
    }
}

/*
* approves an objective, will have a callback to determine success or failure this will load the td with the status field
*/
function approveObjective(itemId, message) {
    // call out to the confirm
    var confirmed = confirm(message);
    if (confirmed == '1') {
        objectivesBean.approveObjective(itemId, approveObjectiveCallback);
    }
}

/*
 * submits the form when an organisation unit has been selected/changed so the correct objectives can be loaded and displayed. 
*/
function ouObjectivesSubmit() {
    document.forms['viewOuObjectives'].submit();
}

function clearObjectiveTextFields(hiddenFieldId, parentTableId, blogCommentFieldId, index) {

    var hiddenFld = getElemById(hiddenFieldId);
    var blogCommentFld = getElemById(blogCommentFieldId);
    var blogCommentHiddenFld = getElemById(blogCommentFieldId + "a");

    hiddenFld.value = "";
    blogCommentFld.innerHTML = "";
    blogCommentHiddenFld.value = "";
}

function addSelected(targetSelectElemId, sourceSelectId) {

    var targetSelectElem = getElemById(targetSelectElemId);
    // get the multiselect element
    var sourceSelectElem = getElemById(sourceSelectId);
    var opts = sourceSelectElem.options;
    for (var i = 0; i < opts.length; i++) {
        var selectElem = opts[i];
        if (selectElem.selected) {
            // loop through the target elements options so we do not duplicate entries
            var hasEntry = false;
            for (var x = 0; x < targetSelectElem.options.length; x++) {
                if (targetSelectElem.options[x].value == selectElem.value) {
                    hasEntry = true;
                    break;
                }
            }
            if (!hasEntry) targetSelectElem.options[targetSelectElem.options.length] = new Option(selectElem.text, selectElem.value);
        }
    }
}

function assignSelectedToAll(selectId, targetTblId) {

    var tble = getElemById(targetTblId);
    var allSelectBoxes = tble.getElementsByTagName("SELECT");

    for (var i = 0; i < allSelectBoxes.length; i++) {
        addSelected(allSelectBoxes[i].id, selectId);
    }
}

function removeSelected(targetSelectElemId, sourceElemId) {

    var sourceSelectElem = getElemById(sourceElemId);
    var childElems = sourceSelectElem.options;

    var selectElem = getElemById(targetSelectElemId);
    // remove the selected options
    for (var i = 0; i < selectElem.options.length; i++) {
        var selectedOption = selectElem.options[i];
        if (selectedOption.selected) {
            // uncheck the checkbox
            for (var j = 0; j < childElems.length; j++) {
                if (childElems[j].value == selectedOption.value) childElems[j].selected = false;                
            }
            selectElem.options[i] = null;
            i--;
        }
    }
}

function removeAllSelections(tbleId, divId) {

    clearSelections(tbleId);
    clearCheckedAssessors(divId);
}

// clears all options from all select boxes within the given table given by the tbleId (table id)
function clearSelections(tbleId) {

    var tble = getElemById(tbleId);
    var allSelectBoxes = tble.getElementsByTagName("SELECT");

    for (var i = 0; i < allSelectBoxes.length; i++) {
        var selectElem = allSelectBoxes[i];
        clearOptions(selectElem);
    }
}

// removes all options from a select box the selectElem being the element not an ID
function clearOptions(selectElem) {

    for (var j = 0; j < selectElem.options.length; j++) {
        selectElem.options[j] = null;
        j--;
    }
}

function clearCheckedAssessors(divId) {

    var selectElem = getElemById(divId);
    var childElems = selectElem.options;

    for (var k = 0; k < childElems.length; k++) {
        childElems[k].selected = false;
    }
}

function saveAssessors(tbleId) {

    // get all the select boxes
    var tble = getElemById(tbleId);
    var selectElems = tble.getElementsByTagName("SELECT");


    for (var i = 0; i < selectElems.length; i++) {
        var users = new Array();
        var selectElem = selectElems[i];
        var selectedElemName = selectElem.name;

        var objectiveId = selectedElemName.substring(selectedElemName.lastIndexOf("_") + 1, selectedElemName.length)

        for (var j = 0; j < selectElem.options.length; j++) {
            var opt = selectElem.options[j];
            var userId = opt.value;
            users.push(userId);
        }

        objectivesBean.saveAssessors(objectiveId, users);
    }
}

// called when the popup is closed in order to reset the assessors information
// targetTableId the table containing the list of selected assessors for each objective
// the hidden field that contains the objectiveSet from which we access the current set of objectives
function resetAssessors(targetTableId, objSetFieldId, userSelectorDiv) {

    var tble = getElemById(targetTableId);
    clearCheckedAssessors(userSelectorDiv);

    // get all the select elements
    var selectElems = tble.getElementsByTagName("SELECT");
    // the select element's name is post-fixed with the objective id
    var i = 0;

    for (; i < selectElems.length; i++) {

        var selectElem = selectElems[i];
        clearOptions(selectElem);
        var objectiveId = selectElem.name.substring(objSetFieldId.length);

        objectivesBean.findAssessors(objectiveId, function(str) {

            var index = 0;
            for (var prop in str) {
                var userObjIdArray = prop.split(':');
                var userId = userObjIdArray[0];
                //var foundElem = getElemById(objSetFieldId + userObjIdArray[1]);
                var elemName = objSetFieldId + userObjIdArray[1];
                var foundElem = document.getElementsByName(elemName)[0];
                foundElem.options[index] = new Option(str[prop], userId);
                index++;
            }
        });
    }
}