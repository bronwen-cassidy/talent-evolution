var currentTimeOutAmount;
var timer;
var countDownTimer;
var timeOutWarningMessage;
var logoutUrl;
var ignoreTimer = false;
var CountActive = true;
var CountStepper = -1;
var DisplayFormat = "%%M%% Minutes, %%S%% Seconds.";
var navTdId = "td_hideable";
var thisTimeoutAmount;


function disableButton(theButton)
{
    theButton.disabled = true;
}

function disableSubmitButton(btnId) {
    disableButton(getElemById(btnId));
}

function enableDisableCheckbox(srcElem, targetElemId) {
    var targetElem = getElemById(targetElemId);
    if (srcElem.checked) {
        targetElem.checked = false;
        targetElem.disabled = true;
    } else {
        targetElem.disabled = false;
    }
}

function disableElement(elementIds) {

    if (elementIds) {
        clearElements(elementIds);
        for (var i = 0; i < elementIds.length; i++) {
            var elem = getElemById(elementIds[i]);
            elem.disabled = true;
        }
    }
}

function enableElement(elementIds) {
    if (elementIds) {
        for (var i = 0; i < elementIds.length; i++) {
            var elem = getElemById(elementIds[i]);
            elem.disabled = false;
        }
    }
}

function clearElements(elementIds) {
    if (elementIds) {
        for (var i = 0; i < elementIds.length; i++) {
            var elem = getElemById(elementIds[i]);
            if (elem.tagName == "SELECT") {
                elem.options[0].selected = "true";
            }
            if (elem.tagName == "INPUT") {
                elem.value = "";
                elem.text = "";
            }
        }
    }
}

function selectElements(elementIds) {
    if (elementIds) {
        for (var i = 0; i < elementIds.length; i++) {
            var elem = getElemById(elementIds[i]);
            elem.checked = true;
        }
    }
}

function deselectElements(elementIds) {
    if (elementIds) {
        for (var i = 0; i < elementIds.length; i++) {
            var elem = getElemById(elementIds[i]);
            elem.checked = false;
        }
    }
}

function clearSelectionOptions(selectElemId) {
    var selectElem = getElemById(selectElemId);
    for (var j = 0; j < selectElem.options.length; j++) {
        selectElem.options[j].selected = false;
    }
}

var submitted = false;

function submitForm(theForm)
{
    if (submitted) {
        return;
    }

    theForm.submit();
    submitted = true;
}

function createCookie(name, value) {
    var expires = "";
    document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}

function submitFormWithTarget(theForm, target, targetFieldId) {
    var targetField = getElemById(targetFieldId);
    targetField.name = "_target" + target;
    targetField.value = "_target" + target;
    var frm = document.forms[theForm];
    submitForm(frm);
}

function confirmAction(url, message) {
    var confirmed;
    confirmed = confirm(message);
    if (confirmed == '1') {
        sendTo(url);
    }
}

function confirmActionAndPost(frmName, message) {
    var confirmed;
    confirmed = confirm(message);
    if (confirmed == '1') {
        document.forms[frmName].submit();
    }
}

function sendTo(url) {
    if (timer != null) window.clearTimeout(timer);
    window.location.href = url;
}

function showHideNav() {

    var navTd = getElemById(navTdId);
    if (navTd != null) {
        if (navTd.style.display == 'none') {
            navTd.style.display = 'block';
            navSessionBean.setNavVisible();
        } else {
            navTd.style.display = 'none';
            navSessionBean.setNavHidden();
        }
    }
}

function setDefaultReadPermissions(searchable, individual_write, manager_write, selected, itemsToCheck)
{
    var checked = (selected.checked == 1);
    if (checked)
    {
        setCheckedDisabled(itemsToCheck, checked);
    }
    else
    {
        if (selected == searchable)
        {
            if ((individual_write != undefined) && (individual_write.checked == 0))
            {
                if (itemsToCheck[1] != null)
                {
                    setCheckedDisabled(itemsToCheck[1], checked);
                }
            }
            if ((manager_write != undefined) && (manager_write.checked == 0))
            {
                if (itemsToCheck[0] != null)
                {
                    setCheckedDisabled(itemsToCheck[0], checked);
                }
            }
        }
        else
        {
            if (searchable.checked == 0) setCheckedDisabled(itemsToCheck, checked)

        }
    }
}


function setCheckedDisabled(itemsToCheck, checked)
{
    setChecked(itemsToCheck, checked);
    setDisabled(itemsToCheck, checked);
}


function setDisabled(field, value)
{
    try
    {
        if (field != null)
        {
            if (field.length != null)
            {
                for (var i = 0; i < field.length; i++)
                {
                    if (field[i] != undefined)
                    {
                        field[i].disabled = value;
                    }
                }
            }
            else
            {
                field.disabled = value;
            }
        }
    }
    catch (e)
    {
        alert("Error in setDisabled(). " + e.message);
    }
}

function writeSelected(read, write)
{
    if (write.checked == 1)
    {
        setChecked(read, 1);
        read.disabled = true;
    }
    else
    {
        read.disabled = false;
    }
}

function setBackgroundColour(select)
{
    var selectedIndex = select.selectedIndex;
    var selectedOption = select.options[selectedIndex];

    if (selectedOption != null) select.style.backgroundColor = selectedOption.style.backgroundColor;
}

function getElemById(id)
{
    return getElemByIdAndDoc(id, document, true);
}

function getElemByIdAndDoc(id, doc)
{
    var elem = null;
    if (id != null)
    {
        if (doc.getElementById != null)
        {
            elem = doc.getElementById(id);
        }
        else if (doc.all != null)
        {
            elem = doc.all[id];
        }
    }
    return elem;
}


function setChecked(field, value)
{
    try
    {
        if (field != null)
        {
            if (field.length != null)
            {
                for (var i = 0; i < field.length; i++)
                {
                    if (field[i] != undefined && !field[i].disabled)
                    {
                        field[i].checked = value;
                    }
                }
            }
            else
            {
                field.checked = value;
            }
        }
    }
    catch (e)
    {
        alert("Error in setChecked(). " + e.message);
    }
}

function checkAll(field)
{
    setChecked(field, true);
}

function uncheckAll(field)
{
    setChecked(field, false);
}

function placeFocus(body)
{
    placeFormFocus();
}

function placeFormFocus()
{
    try
    {
        if (document.forms.length > 0)
        {
            for (var f = document.forms.length - 1; f >= 0; f--)
            {
                var frm = document.forms[f];

                if (frm.elements.length > 0)
                {
                    for (var i = 0; i < frm.elements.length; i++)
                    {
                        var elm = frm.elements[i];

                        if ((elm.type == "text") || (elm.type == "textarea") ||
                            (elm.type == "checkbox") || (elm.type == "password"))
                        {
                            elm.focus();
                            return true;
                        }
                    }
                }
            }
        }
    }
    catch(e)
    {
    }
    return false;
}

function swapStyle(thing, oldStyle, newStyle)
{
    try
    {
        var nowClass = thing.className;
        thing.className = nowClass.replace(oldStyle, newStyle);
    }
    catch(e)
    {
        alert("Error setting style. " + e.message);
    }
}

function toggleTime(fromElement, toElement)
{
    var from = getElemById(fromElement);
    var target = getElemById(toElement);

    if (from.selectedIndex != 0)
    {
        if (target.selectedIndex == 0)
        {
            target.selectedIndex = 1;
        }
    }
    else
    {
        if (target.selectedIndex != 0)
        {
            target.selectedIndex = 0;
        }
    }
}

function setHiddenAndSubmit(formName, hiddenFieldId, val)
{
    var frm = document.forms[formName];
    var hiddenFld = getElemById(hiddenFieldId);
    hiddenFld.value = val;
    frm.submit();
}

function setHiddenField(hidFieldId, hidFldVal, hidFldNme)
{
    var hiddenFld = getElemById(hidFieldId);
    if (hiddenFld != null)
    {
        if (hidFldNme != null) hiddenFld.name = hidFldNme;
        hiddenFld.value = hidFldVal;
    }
}

function setNameValueAndSubmit(formNme, fldId, fldName, fldValue) {
    setHiddenField(fldId, fldValue, fldName);
    submitForm(document.forms[formNme]);
}


function switchTab(hiddenFieldId, newActiveTabId)
{
    var hiddenField = getElemById(hiddenFieldId);
    var currentTabId = hiddenField.value;

    if (currentTabId != newActiveTabId)
    {

        swapStyle(getElemById(currentTabId), 'tab_active_tab', 'tab_inactive_tab');
        getElemById(currentTabId + "_span").style.display = "none";


        swapStyle(getElemById(newActiveTabId), 'tab_inactive_tab', 'tab_active_tab');
        getElemById(newActiveTabId + "_span").style.display = "inline";

        hiddenField.value = newActiveTabId;

        placeFormFocus();
    }
}

function showHideDivs(formElemName, readonlyElemsId, disableVar) {
    var formElem = document.forms[formElemName];
    var divElemArray = formElem.getElementsByTagName("div");

    for (var i = 0; i < divElemArray.length; i++) {
        var divElem = divElemArray[i];
        if (divElem.className == "open") {
            divElem.className = "closed";
        } else {
            divElem.className = "open"
        }
    }

    if (readonlyElemsId != null) {
        var formElemArray = formElem.elements;
        for (i = 0; i < formElemArray.length; i++) {
            var childFormElem = formElemArray[i];
            if (childFormElem.name == readonlyElemsId) {
                childFormElem.disabled = disableVar;
            }
        }
    }
}

/**
 * Used to check the number of characters typed into a text box
 */

function CheckFieldLength(fn, wn, rn, mc) {
    var len = fn.value.length;
    if (len > mc) {
        fn.value = fn.value.substring(0, mc);
        len = mc;
    }
    document.getElementById(wn).innerHTML = len;
    document.getElementById(rn).innerHTML = mc - len;
}
function tabLoading(hideTab, loadingTab)
{
    var tab = getElemById(hideTab);
    tab.style.display = "none";
    var loading = getElemById(loadingTab);
    loading.style.display = "block";
}

function loading(node, label)
{
    getElemById(node).innerHTML = '<div class="loading" style="display:block;">' + label + '<br/><img src="/../images/loading_large.gif" alt="loading"/></div>';
}

function setValue(elemId, value)
{
    getElemById(elemId).value = value;
}

function setValueAndSubmit(formId, elemId, value) {
    setValue(elemId, value);
    document.forms[formId].submit();
    return false;
}

function setName(elemId, name) {
    getElemById(elemId).name = name;
}

function setNameAndSubmit(formId, elemId, name) {
    setName(elemId, name);
    document.forms[formId].submit();
    return false;
}

function setNameAndValue(elemId, name, value) {
    setName(elemId, name);
    setValue(elemId, value);
}

function clearField(elemId) {
    getElemById(elemId).value = '';
}

function clearAndSetField(elemId, originalElemId) {
    var fieldElem = getElemById(elemId);
    var originalField = getElemById(originalElemId);
    fieldElem.value = originalField.value;
}

function hideTable(tbleElemId, expandElemId, minimizeElemId) {
    createCookie(tbleElemId, 'invisible');
    getElemById(tbleElemId).style.display = 'none';
    getElemById(expandElemId).style.display = 'inline';
    getElemById(minimizeElemId).style.display = 'none';
}

function showTable(tbleElemId, expandElemId, minimizeElemId) {
    createCookie(tbleElemId, "visible");
    getElemById(tbleElemId).style.display = 'inline';
    getElemById(expandElemId).style.display = 'none';
    getElemById(minimizeElemId).style.display = 'inline';
}

function logoutOnTimeout() {
    sendTo(logoutUrl);
}

function calcage(secs, num1, num2) {
    var s = ((Math.floor(secs / num1)) % num2).toString();
    if (s.length < 2)
        s = "0" + s;
    return "<b>" + s + "</b>";
}

var timeOutPeriod = (Math.abs(CountStepper) - 1) * 1000 + 990;

function CountBack(secs) {

    if (secs < 0) {
        window.clearTimeout(countDownTimer);
        logoutOnTimeout();
        return;
    }

    var DisplayStr = DisplayFormat.replace(/%%M%%/g, calcage(secs, 60, 60));
    DisplayStr = DisplayStr.replace(/%%S%%/g, calcage(secs, 1, 60));

    document.getElementById("cntdwn").innerHTML = DisplayStr;
    if (CountActive)
        countDownTimer = window.setTimeout("CountBack(" + (secs + CountStepper) + ")", timeOutPeriod);
}

function warningToTimeout() {
    var warningMsg = getElemById('timeoutWarningMsgIdz').value;
    popupShowWarning(warningMsg, 'sessionExpWarning');
    window.clearTimeout(timer);
    CountBack(4 * 60);
}

function popupHideWarning(popupId, popupIFrame) {
    window.clearTimeout(timer);
    var warningPopup = getElemById(popupId);
    var warningPopupIFrame = getElemById(popupIFrame);
    popupHide(warningPopup, warningPopupIFrame);

}

function removeTimer() {
    ignoreTimer = true;
}

function pollTimeOut(timeoutAmount, message, url) {
    thisTimeoutAmount = timeoutAmount;
    timeOutWarningMessage = message;
    logoutUrl = url;

    if (!ignoreTimer) {
        window.clearTimeout(timer);
        window.clearTimeout(countDownTimer);
        currentTimeOutAmount = timeoutAmount - (5 * 60 * 1000);
        timer = window.setTimeout('warningToTimeout()', currentTimeOutAmount);
    }
}

function checkHiddenDivs(parentContainerId, buttonDivElemPrefix, tbleDivPrefix) {
    var parentContainer = getElemById(parentContainerId);

    if (parentContainer) {

        var childDivs = parentContainer.getElementsByTagName("DIV");
        for (var i = 0; i < childDivs.length; i++) {
            var childDiv = childDivs[i];
            var elemId = childDiv.id;
            if (elemId.indexOf(tbleDivPrefix) > -1) {

                if (readCookie(elemId) == 'invisible') {
                    childDiv.style.display = "none";

                    var buttonDivElemId = buttonDivElemPrefix + elemId.substring(2, elemId.length);
                    var buttonDivElem = getElemById(buttonDivElemId);
                    if (buttonDivElem) {
                        var expandSpan = buttonDivElem.getElementsByTagName("SPAN")[1];
                        var minimizeSpan = buttonDivElem.getElementsByTagName("SPAN")[2];
                        expandSpan.style.display = "inline";
                        minimizeSpan.style.display = "none";
                    }
                }
            }
        }
    }
}

function enableSelection(elemId1, elemId2) {
    getElemById(elemId1).disabled = false;
    getElemById(elemId2).disabled = false;
}

function getInnerHeight() {

    var y;
    if (self.innerHeight) {
        y = self.innerHeight;
    } else if (document.documentElement && document.documentElement.clientHeight) {
        y = document.documentElement.clientHeight;
    } else if (document.body) {
        y = document.body.clientHeight;
    }
    return(y);
}

function getScrollOffset() {
    var y;
    if (self.pageYOffset) {
        y = self.pageYOffset;
    } else if (document.documentElement && document.documentElement.scrollTop) {
        y = document.documentElement.scrollTop;
    } else if (document.body) {
        y = document.body.scrollTop;
    }
    return(y);
}

function copyText(sourceElem, targetElemId) {
    var elem1 = getElemById(targetElemId);
    if(!elem1.value) {
        elem1.value = sourceElem.options[sourceElem.selectedIndex].text;
    }
}// variables to hold the zIndex and the resize counter for the current showing popup
var zIndex = 10000;
var startEventPos = new Array();
var startPosWindow = new Array();
var startWindowSize = new Array();
var onCloseFunction = null;


/**/
function findPosX(obj)
{
    var curleft = 0;

    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curleft += obj.offsetLeft;
            obj = obj.offsetParent;
        }
    } else if (obj.offsetLeft) {
        curleft += obj.offsetLeft;
    }
    return curleft;
}

/**/
function findPosY(obj)
{
    var curtop = 0;

    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curtop += obj.offsetTop;
            obj = obj.offsetParent;
        }
    } else if (obj.offsetTop) {
        curtop += obj.offsetTop;
    }
    return curtop;
}


/* drag event variable declarations */
var dragAllowed = false;
var dragStartX;
var dragStartY;
var mouseStartX;
var mouseStartY;

document.onmouseup = new Function("dragAllowed = false");

function startDragDrop(e)
{
    mouseStartX = e.clientX;
    mouseStartY = e.clientY;

    dragStartX = parseInt(displayedPopup.style.left);
    dragStartY = parseInt(displayedPopup.style.top);

    dragAllowed = true;

    document.onmousemove = doDrag;
}

function doDrag(e)
{
    if (dragAllowed) {
        if (e == null)  e = event;

        x = dragStartX + e.clientX - mouseStartX;
        y = dragStartY + e.clientY - mouseStartY;

        if (x >= 0) {
            displayedPopup.style.left = x + "px";
            displayedPopupIframe.style.left = x + "px";
        }
        if (y >= 0) {
            displayedPopup.style.top = y + "px";
            displayedPopupIframe.style.top = y + "px";
        }
        return false;
    }
}

/*
 Global variables for popups. We remember which popup is displayed (if any), and the
 two fields in the main page that are associated with the popup (The display value
 and the corresponding key.
 */

var targetElement = null;
var displayedPopup = null;
var displayedPopupId = null;
var displayedPopupIframe = null;
var displayedWindowContent = null;

var popupPartnerValueField = null;
var popupPartnerKeyField = null;
var onSelectFunction = null;

var initResizeCounter = -1;


function initResizeWindow(e)
{
    if (document.all) e = event;
    initResizeCounter = 0;
    startWindowSize = [displayedWindowContent.offsetWidth, displayedWindowContent.offsetHeight];
    startEventPos = [e.clientX, e.clientY];
    startResizeWindow();
    return false;

}

function startResizeWindow()
{
    if (initResizeCounter >= 0 && initResizeCounter <= 10) {
        initResizeCounter++;
        setTimeout('startResizeWindow()', 5);
    }
}

function moveWindow(e)
{
    if (document.all)e = event;

    if (initResizeCounter >= 10) {
        var newWidth = Math.max(startWindowSize[0] + e.clientX - startEventPos[0]);
        var newHeight = Math.max(startWindowSize[1] + e.clientY - startEventPos[1]);
        displayedPopup.style.width = newWidth + 'px';
        displayedWindowContent.style.height = newHeight + 'px';
        displayedPopupIframe.style.width = newWidth + 'px';
        displayedPopupIframe.style.height = (newHeight + 20) + 'px';
    }

    if (!document.all) return false;
}

function stopMove(e)
{
    if (document.all)e = event;
    initResizeCounter = -1;
}

function cancelEvent()
{
    return initResizeCounter == -1;
}

//
// Show a popup, moving it to be next to the control which invoked it.
//
// Parameters:
//		title:			String containing html to display in title of popup. Can be 'null' for no title
//		popupRoot: 		The control to anchor the top-left of the popup to. This control MUST be
//						an element that has a style applied to it.
//		popupId:		id of the element implementing the popup
//		partnerValueId:	id of the text field to recieve display text of selected item
//		partnerKeyId:	id of the text field to recieve key value of the selected item
//		onSelFunc:		JavaScript function to call when selection made. (Can be null)
//		allowClear:		true or false - display the Clear button or not.
//
function popupShow(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, currElem)
{
    initialiseState(popupId);
    //    pTop = findPosY(popupRoot);
    //    pLeft = findPosX(popupRoot);
    //    var pTop = document.body.scrollTop + (document.body.clientHeight  / 2);
    //    var pLeft = document.body.scrollLeft + (document.body.clientWidth / 2);
    var pTop = getScrollOffset() + ( getInnerHeight() / 2 );
    var pLeft = document.body.clientWidth / 2;
    pLeft -= 100;
    pTop -= 100;
    
    popupShowTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, currElem)
}

function popupShowWarning(title, popupId) {

    var popupTitle = getElemById(popupId + "Title");
    popupTitle.innerHTML = title;

    showHideClearButton(popupId, false);

    // midpoint of the screen
    var pTop = document.body.scrollTop + (document.body.clientHeight / 2);
    var pLeft = document.body.scrollLeft + (document.body.clientWidth / 2);

    pLeft -= 70;
    pTop -= 10;

    var popup = getElemById(popupId);

    displayedPopupIframe = getElemById(popupId + "Iframe");

    popup.style.top = pTop + "px";
    popup.style.left = pLeft + "px";

    displayedPopupIframe.style.top = pTop + "px";
    displayedPopupIframe.style.left = pLeft + "px";

    // set offset on iframe
    setOffSet(popup, displayedPopupIframe);

    // make visible
    popup.style.display = "inline";
    displayedPopupIframe.style.display = "inline";

    // Remember that we've displayed this popup
    displayedPopup = popup;
    displayedWindowContent = getElemById(popupId + 'Content');
}

function popupShowTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, currElem)
{
    // Close any existing popup

    if (displayedPopup != null)
    {
        popupHide();
    }

    displayedPopupId = popupId;
    onSelectFunction = onSelFunc;

    // Get the popup and set its title
    var popupTitle = getElemById(popupId + "Title");
    popupTitle.innerHTML = title;

    showHideClearButton(popupId, allowClear);

    if (partnerValueId != null) popupPartnerValueField = getElemByIdAndDoc(partnerValueId, document, true);
    if (partnerKeyId != null) popupPartnerKeyField = getElemByIdAndDoc(partnerKeyId, document, true);

    windowPopupShow(popupId, pTop, pLeft, currElem);
}

//
// Hide a popup
//

function showHideClearButton(popupId, allowClear)
{
    var clearBtn = getElemById(popupId + "ClearBtn");

    if (allowClear)
    {
        clearBtn.style.display = 'inline';
    }
    else
    {
        clearBtn.style.display = 'none';
    }
}

function popupHide(popupToHide, popupIframeToHide)
{
    if (onCloseFunction) {
        eval(onCloseFunction);
        onCloseFunction = null;
    } else if (parent.onCloseFunction) {
        parent.eval(parent.onCloseFunction);
        parent.onCloseFunction = null;
    }

    if (popupToHide == null)
    {
        popupToHide = displayedPopup;
    }
    if (popupIframeToHide == null)
    {
        popupIframeToHide = displayedPopupIframe;
    }

    if (popupToHide != null)
    {
        popupToHide.style.display = 'none';
        popupIframeToHide.style.display = 'none';
        popupToHide = null;
        popupPartnerField = null;
    }
}

function windowPopupShow(popupId, pTop, pLeft, currElem) {


    var popup = getElemById(popupId);

    // This is a fudge to get around the bug in IE where combos are always displayed
    // on top of divisions. We place an Iframe, the same size as the popup, under the
    // popup. This sits over any combo, and hides them.

    displayedPopupIframe = getElemById(popupId + "Iframe");

    // Put the popup at the top of the display. This allows it to fully draw, and we
    // can then get its height and width. We then adjust its position so that ideally
    // it's top left is at top left of the root object, but adjusted so that the
    // entire popup is displayed within the window.
    popup.style.top = "0pt";
    popup.style.left = "0pt";

    // set position of elements
    setPosition(popup, displayedPopupIframe, pTop, pLeft);

    // set offset on iframe
    setOffSet(popup, displayedPopupIframe);

    // make visible
    popup.style.display = "inline";
    displayedPopupIframe.style.display = "inline";

    // Remember that we've displayed this popup
    displayedPopup = popup;
    displayedWindowContent = getElemById(popupId + 'Content');

    if (currElem) {
        // get the windows original scroll positions
        var scrollX = document.body.scrollLeft;
        var scrollY = document.body.scrollTop;
        currElem.focus();
        currElem.scrollIntoView(true);
        window.scrollTo(scrollX, scrollY);
    }
}

// set offset on iframe
function setOffSet(popup, displayedPopupIframe)
{
    displayedPopupIframe.style.width = popup.offsetWidth + "px";
    displayedPopupIframe.style.height = popup.offsetHeight + "px";
}

// calculate x and y positions for popup and popupiframe
function setPosition(popup, displayedPopupIframe, pTop, pLeft)
{
    // calculate max height
    var displayMax = document.body.clientHeight + document.body.scrollTop;
    if ((pTop + popup.offsetHeight) > displayMax)
    {
        pTop = displayMax - popup.offsetHeight;
    }

    // calculate max width
    displayMax = document.body.clientWidth + document.body.scrollLeft;
    if ((pLeft + popup.offsetWidth) > displayMax)
    {
        pLeft = displayMax - popup.offsetWidth;
    }

    // set x and y positions
    popup.style.top = pTop + "px";
    popup.style.left = pLeft + "px";

    displayedPopupIframe.style.top = pTop + "px";
    displayedPopupIframe.style.left = pLeft + "px";
}

//
// User has completed a selection in a popup. Transfer the selected value and key
// to the required fields in the main page and hide the popup.
//

function popupServerOK(popupId, selectedValue, selectedKey)
{
    var doc = window.parent.document;

    var popupPartnerValueName = getElemByIdAndDoc(popupId + 'popupLabelField', doc).value;
    var popupPartnerDisplayName = getElemByIdAndDoc(popupId + 'popupDisplayField', doc).value;
    var popupPartnerKeyName = getElemByIdAndDoc(popupId + 'popupIdField', doc).value;
    var popupOnSelect = getElemByIdAndDoc(popupId + 'popupOnSelect', doc).value;

    var popupPartnerValueField = getElemByIdAndDoc(popupPartnerValueName, doc);
    var popupPartnerDisplayField = getElemByIdAndDoc(popupPartnerDisplayName, doc);
    var popupPartnerKeyField = getElemByIdAndDoc(popupPartnerKeyName, doc);

    var popup = getElemByIdAndDoc(popupId, doc);
    var popupIframe = getElemByIdAndDoc(popupId + "Iframe", doc);


    if (popupPartnerValueField != null)
    {
        popupPartnerValueField.value = selectedValue;
    }

    if (popupPartnerKeyField != null)
    {
        popupPartnerKeyField.value = selectedKey;
    }

    if (popupPartnerDisplayField != null)
    {
        popupPartnerDisplayField.value = selectedValue;
    }

    popupHide(popup, popupIframe);


    if (popupOnSelect != 'undefined')
    {
        eval(popupOnSelect);
    }

}

//
// User has completed a selection in a popup. Transfer the selected value and key
// to the required fields in the main page and hide the popup.
//

function popupOK(selectedValue, selectedKey)
{
    if (popupPartnerValueField != null)
    {
        popupPartnerValueField.value = selectedValue;
    }

    if (popupPartnerKeyField != null)
    {
        popupPartnerKeyField.value = selectedKey;
    }

    popupHide();

    if (onSelectFunction != null && onSelectFunction != "")
    {
        //onSelectFunction();
        eval(onSelectFunction);
    }
}


//
// Used by colour picker to select a foreground colour given a background colour
//

function foregroundColour(backgroundColour)
{
    var result;

    var r = parseInt(backgroundColour.substr(1, 2), 16);
    var g = parseInt(backgroundColour.substr(3, 2), 16);
    var b = parseInt(backgroundColour.substr(5, 2), 16);

    if (g < 0x66)
    {
        // Reds and Blues have white text
        result = "white";
    }
    else if ((g >= 0xcc) || (r >= 0xcc))
    {
        // Light Greens and oranges have black text
        result = "black";
    }
    else
    {
        // Everything else has white text
        result = "white"
    }

    return result;
}

//
// Used by colour popup to display the highlighted colour..
//

var colourDispField = null;

function showColour(colour)
{
    if (colourDispField == null)
    {
        colourDispField = getElemById("colourDispField");
    }

    colourDispField.innerHTML = colour;
    colourDispField.style.backgroundColor = colour;
    colourDispField.style.color = foregroundColour(colour);
}

//
// User has completed a selection in a colour selector. Transfer the selected colour
// to the required key field and change the background colour of the value field to
// the colour.
//

function selectColour(colour)
{
    if (popupPartnerValueField != null)
    {
        popupPartnerValueField.style.backgroundColor = colour;
        popupPartnerValueField.style.color = foregroundColour(colour);
    }

    if (popupPartnerKeyField != null)
    {
        popupPartnerKeyField.value = colour + ":" + foregroundColour(colour);
    }

    popupHide();
}

//
// This (recursive) function is used to clean up the html of a tree popup prior to
// displaying it. We remove any extraneous whitespace between the main elements of
// the tree display. This is caused by linefeeds, tabs and spaces between the
// elements in the html source, and if left in causes the tree to be incorrectly
// spaced. Removing these also makes it easier to locate the elements used to
// expand and collaps tree nodes.
//
// The current selection from the tree is highlighted, and any previously highligh
// entry un-highlighted.
//
// Return the <div> element for the current selection if there is one.
//

function cleanTree(elem, currentSelection)
{
    var i;
    var cld;
    var result = null;

    for (i = elem.childNodes.length; i > 0; i--)
    {
        cld = elem.childNodes.item(i - 1);

        if (cld.nodeType == 3) // Text
        {
            //if ((elem.nodeType == 1) &&  // Element
            //			((elem.nodeName == "SPAN") || (elem.nodeName == "DIV")))
            //{
            //	elem.removeChild(cld);
            //}
        }
        else if (cld.nodeType == 8)    // Comment
        {
            elem.removeChild(cld);
        }
        else
        {
            var x = cleanTree(cld, currentSelection);

            if (x != null)
            {
                result = x;
            }
        }
    }

    // Set the highlight style on the current item and remove on others.

    var itm = "item_" + currentSelection;

    if ((elem.nodeType == 1) && (elem.nodeName == "A"))
    {
        if (elem.id == itm)
        {
            elem.className = "treeItem treeCurrentItem";
            result = elem.parentNode;
        }
        else
        {
            elem.className = "treeItem";
        }
    }
    return result;
}

//
// Open branches of the tree to the specified node.
//

function openTreeTo(elem)
{
    // Find the "treeLevel" containing the given node.

    if ((elem != null) && (elem.className == "treeItem"))
    {
        var p2 = elem.parentNode;

        if ((p2 != null) && (p2.className == "treeLevel") &&
            (p2.style.display != 'inline'))
        {
            // The tree branch is "closed", so open it. Get the node immediatly above it,
            // which will be the folder to expand.

            var s1 = p2.previousSibling;

            if ((s1 != null) && (s1.className == "treeItem"))
            {
                // Find the <span> containing the folders

                var c1 = s1.firstChild;

                while ((c1 != null) && (c1.nodeName != "SPAN"))
                {
                    c1 = c1.nextSibling;
                }

                if (c1 != null)
                {
                    // Open this branch and then its parent...

                    toggleTreeFolder(c1);
                    openTreeTo(s1);
                } else {
                    // s1 is the element to get the y value from need to scroll to the selected (highlighted element)                    
                    //alert("found a y position: " + findPosY(s1));
                }
            }
        }
    }
}

//
// Dislpay a tree popup. The tree is cleaned (see above) prior to display, and if there's
// a current selection, the tree expanded to highlight the selected entry.
//

function popupShowTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear)
{
    var popup = getElemById(popupId + "Content");

    popupPartnerKeyField = getElemById(partnerKeyId);

    var currentElemId = popupPartnerKeyField.value;

    if (!currentElemId) {
        currentElemId = getElemById('defaultNavOUId').value;
    }

    var currentElem = cleanTree(popup, currentElemId);

    if (currentElem != null)
    {
        openTreeTo(currentElem);
    }

    popupShow(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, currentElem);
}

//
// Dislpay a tree popup. The tree is cleaned (see above) prior to display, and if there's
// a current selection, the tree expanded to highlight the selected entry.
//

function popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, displayFieldId)
{
    initialiseState(popupId);
    var pTop = getScrollOffset() + ( getInnerHeight() / 2 );
    var pLeft = document.body.clientWidth / 2;
    pLeft -= 100;
    pTop -= 100;
//    var scrollTop = document.body.scrollTop;
//    if (scrollTop > 0) {
//        scrollTop = scrollTop / 2;
//    }
//    var pTop = scrollTop + (document.body.clientHeight / 2) - 60;
//    var pLeft = document.body.scrollLeft + (document.body.clientWidth / 2);

    //pLeft -= 100;
    popupShowServerTreeTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, 0, onSelFunc, allowClear, displayFieldId);
}

function showSubjectServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear)
{
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear)
}

function showOrgainisationServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear)
{
    popupShowTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear)
}

function showPositionServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear)
{
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear)
}

function showBlogPopup(title, popupRoot, popupId, partnerValueId, partnerKeyId)
{
    popupShowBlog(title, popupRoot, popupId, partnerValueId, partnerKeyId)
}

function registerCloseFunc(onCloseFunc)
{
    onCloseFunction = onCloseFunc;
}


/*
 * initialises the variables needed for the popups
 */
function initialiseState(popupId) {

    var resizeImage = getElemByIdAndDoc(popupId + 'ResizeWindow', document, true);
    if (resizeImage) resizeImage.onmousedown = initResizeWindow;

    initWindows();
}

function popupShowServerTreeTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, iteration, onSelFunc, allowClear, displayFieldId)
{
    var idfield = getElemById(popupId + "popupIdField");
    var labelfield = getElemById(popupId + "popupLabelField");
    var displayfield = getElemById(popupId + "popupDisplayField");

    idfield.value = partnerKeyId;
    labelfield.value = partnerValueId;
    displayfield.value = displayFieldId;

    var onSelect = getElemById(popupId + "popupOnSelect");
    if (onSelFunc != null)
    {
        onSelect.value = onSelFunc;
    }
    else
    {
        onSelect.value = "";
    }

    var docIframe = window.frames[popupId + 'contentIframe'].document;
    var divelem = getElemByIdAndDoc(popupId, docIframe, true);
    if (divelem == null) return;

    var idselected = getElemById(partnerKeyId).value;

    //    if(!idselected) {
    //        idselected = getElemById('defaultNavOUId').value;
    // todo look at ou pickers which should pass in the default!! otherwise no default
    //    }

    var currentElem = cleanTree(divelem, idselected);

    if (currentElem != null)
    {
        openTreeTo(currentElem);
        popupShowTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear, currentElem);
    }
    else if (idselected && iteration < 2)
    {
        iteration = iteration + 1;
        var iframe = getElemById(popupId + 'contentIframe');
        var iframeSrc = iframe.src;
        var index = iframeSrc.indexOf('&initialLeaf=');
        if (index > 0)
        {
            iframeSrc = iframeSrc.substring(0, index);
        }
        iframeSrc = iframeSrc + "&initialLeaf=" + idselected;
        iframe.src = iframeSrc;

        window.setTimeout("popupShowServerTreeTopLeft('" + title + "'," + pTop + "," + pLeft + ",'" + popupId + "','" + partnerValueId + "','" + partnerKeyId + "'," + iteration + ",'" + onSelFunc + "'," + allowClear + ",'" + displayFieldId + "')", 1000);

    }
    else
    {
        popupShowTopLeft(title, pTop, pLeft, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear);
    }
}


//
//  The tree is cleaned (see above) and expanded to highlight the selected entry.
//


//
//  The tree is cleaned (see above) and expanded to highlight the selected entry.
//


function treeOpenNode(treeId, value)
{
    var tree = getElemById(treeId);
    var currentElem = cleanTree(tree, value);

    if (currentElem != null)
    {
        openTreeTo(currentElem);
        var next = currentElem.nextSibling;
        if (next != null)
        {
            next.style.display = 'inline';
        }
        currentElem.scrollIntoView(true);
    }
}

//
// The following functions control the operation of the tree popup.
//

//
// Expand/collapse a node of a tree by toggling it's display properties.
//

function toggleTreeFolder(nd)
{
    // load images used so we get correct paths
    var openFolder = new Image();
    openFolder.src = "../images/tree/OpenFolder.gif";
    var closedFolder = new Image();
    closedFolder.src = "../images/tree/ClosedFolder.gif";
    var closedBranch = new Image();
    closedBranch.src = "../images/tree/ClosedBranch.gif";
    var openBranch = new Image();
    openBranch.src = "../images/tree/OpenBranch.gif";
    var lastClosedBranch = new Image();
    lastClosedBranch.src = "../images/tree/LastClosedBranch.gif";
    var lastOpenBranch = new Image();
    lastOpenBranch.src = "../images/tree/LastOpenBranch.gif";

    var branch = nd.parentNode;

    var branchImgElement = nd.childNodes[0];
    var folderImgElement = nd.childNodes[1];

    var isOpenBranch = (branchImgElement.src == openBranch.src);
    var isLastOpenBranch = (branchImgElement.src == lastOpenBranch.src);

    var isClosedBranch = (branchImgElement.src == closedBranch.src);
    var isLastClosedBranch = (branchImgElement.src == lastClosedBranch.src);

    // next element - will be hidden / shown as appropriate
    var elmt = branch.nextSibling;

    if (isOpenBranch || isLastOpenBranch)
    {
        // switching from open to closed - change branch image and folder image and element style
        if (isLastOpenBranch)
        {
            branchImgElement.src = lastClosedBranch.src;
        }
        else
        {
            branchImgElement.src = closedBranch.src;
        }

        folderImgElement.src = closedFolder.src;

        // hide next element
        if (elmt != null)
        {
            elmt.style.display = 'none';
        }

    }
    else if (isClosedBranch || isLastClosedBranch)
    {
        // switching from closed to open - change branch image and folder image and element style
        if (isLastClosedBranch)
        {
            branchImgElement.src = lastOpenBranch.src;
        }
        else
        {
            branchImgElement.src = openBranch.src;
        }

        folderImgElement.src = openFolder.src;

        // show next element
        if (elmt != null)
        {
            elmt.style.display = 'inline';
        }
    }
}

//
// Calendar functions
//

var ISODateFormat = "yyyy-mm-dd";

var yearPopup;
var yearButton;
var monthPopup;
var monthButton;
var monthSelected;
var yearSelected;
var dateSelected;
var CalInterval;
var CalTimeout;
var nStartingYear;
var dateNow;
var monthNow;
var yearNow;

function gotoToday()
{
    monthSelected = monthNow;
    yearSelected = yearNow;
    constructCalendar();
    //  TS-2225 Populate field with today's date.
    selectDate(dateNow);
}

function hideCalendar()
{
    if (monthPopup != null)
    {
        monthPopup.style.visibility = "hidden";
    }

    if (yearPopup != null)
    {
        yearPopup.style.visibility = "hidden";
    }
}

function padZero(num)
{
    return (num < 10) ? '0' + num : num;
}

function constructVisibleDate(d, m, y)
{
    return constructDate(VisibleDateFormat, d, m, y);
}

function constructISODate(d, m, y)
{
    return constructDate(ISODateFormat, d, m, y);
}

function constructDate(fmt, d, m, y)
{
    sTmp = fmt;
    sTmp = sTmp.replace("dd", "<e>");
    sTmp = sTmp.replace("d", "<d>");
    sTmp = sTmp.replace("<e>", padZero(d));
    sTmp = sTmp.replace("<d>", d);
    sTmp = sTmp.replace("mmm", "<o>");
    sTmp = sTmp.replace("mm", "<n>");
    sTmp = sTmp.replace("m", "<m>");
    sTmp = sTmp.replace("<m>", m + 1);
    sTmp = sTmp.replace("<n>", padZero(m + 1));
    sTmp = sTmp.replace("<o>", shortMonthName[m]);
    sTmp = sTmp.replace("yyyy", y);
    sTmp = sTmp.replace("yy", padZero(y % 100));
    return sTmp;
}

function closeCalendar()
{
    hideCalendar();

    popupOK(constructVisibleDate(dateSelected, monthSelected, yearSelected),
            constructISODate(dateSelected, monthSelected, yearSelected));
}

// Month Pulldown

function StartDecMonth()
{
    CalInterval = setInterval("decMonth()", 80);
}

function StartIncMonth()
{
    CalInterval = setInterval("incMonth()", 80);
}

function selectDate(dt)
{
    dateSelected = dt;
    closeCalendar();
}

function incMonth()
{
    monthSelected++;

    if (monthSelected > 11)
    {
        monthSelected = 0;
        yearSelected++;
    }

    constructCalendar();
}

function decMonth()
{
    monthSelected--;

    if (monthSelected < 0)
    {
        monthSelected = 11;
        yearSelected--;
    }

    constructCalendar()
}

function constructMonth()
{
    sHTML = "<table cellspacing=0 onmouseover='clearTimeout(CalTimeout)' onmouseout='clearTimeout(CalTimeout);CalTimeout=setTimeout(\"popDownMonth()\",100);event.cancelBubble=true'>";

    for (i = 0; i < 12; i++)
    {
        sName = fullMonthName[i];
        sHTML += "<tr><td class='CalDropdownNormal' id='m" + i + "' onmouseover='this.className=\"CalDropdownSelect\"' onmouseout='this.className=\"CalDropdownNormal\"' onclick='monthSelected=" + i + ";constructCalendar();popDownMonth();event.cancelBubble=true'>" + sName + "</td></tr>";
    }

    sHTML += "</table>";

    monthPopup.innerHTML = sHTML;
}

function popUpMonth()
{
    monthPopup.style.left = monthButton.offsetLeft + "px";
    monthPopup.style.top = (monthButton.offsetTop - 26) + "px";
    monthPopup.style.visibility = "visible";
}

function popDownMonth()
{
    monthPopup.style.visibility = "hidden";
}

// Year Pulldown

function incYear()
{
    // year display till 2200.

    if (nStartingYear <= 2194)
    {
        nStartingYear++;
        constructYear();
    }
}

function decYear()
{
    // year display from 1800

    if (nStartingYear > 1807)
    {
        nStartingYear--;
        constructYear();
    }
}

function selectYear(nYear)
{
    yearSelected = nStartingYear + parseInt(nYear);
    constructCalendar();
    popDownYear();
}

function constructYear()
{
    for (i = 0; i < 7; i++)
    {
        getElemById("y" + i).innerHTML = (i + nStartingYear);
    }
}

function popDownYear()
{
    clearInterval(CalInterval);
    clearTimeout(CalTimeout);

    yearPopup.style.visibility = "hidden";
}

function popUpYear()
{
    nStartingYear = yearSelected - 3;
    constructYear();

    yearPopup.style.left = yearButton.offsetLeft + "px";
    yearPopup.style.top = (yearButton.offsetTop - 26) + "px";
    yearPopup.style.visibility = "visible";
}

// Calendar body

function constructCalendar()
{
    var startDate = new Date(yearSelected, monthSelected, 1);
    var endDate = new Date(yearSelected, monthSelected + 1, 1);
    endDate = new Date(endDate - (24 * 60 * 60 * 1000));
    numDaysInMonth = endDate.getDate();

    sHTML = "<table border='0' cellspacing='0'><tr>";

    for (i = 0; i < 7; i++)
    {
        sHTML += "<td class='CalDayName'>" + dayName[i] + "</td>";
    }

    datePointer = 1 - startDate.getDay() + weekStartAt;

    for (r = 0; r < 6; r++)
    {
        sHTML += "</tr><tr>";

        for (i = 0; i < 7; i++)
        {
            if ((datePointer <= 0) || (datePointer > numDaysInMonth))
            {
                sHTML += "<td>&nbsp;";
            }
            else
            {
                var sStyle = "CalNormalDay";
                //regular day

                // today

                if ((datePointer == dateNow) && (monthSelected == monthNow) && (yearSelected == yearNow))
                {
                    sStyle = "CalCurrentDay";
                }

                sHTML += "<td class='CalNormal' onmouseover='this.className=\"CalSelect\"' onmouseout='this.className=\"CalNormal\"' onclick='selectDate(" + datePointer + ");'>";
                sHTML += "<span class='" + sStyle + "'>" + datePointer + "</span>";
            }

            sHTML += "</td>";
            datePointer++;
        }
    }

    sHTML += "</tr></table>";

    getElemById("CalBody").innerHTML = sHTML;
    monthButton.innerHTML = fullMonthName[monthSelected];
    yearButton.innerHTML = yearSelected;
}


//
// Dislpay a Calendar popup
//
//  var popupRoot=getElemById(popupRootId);
function popupShowCalendarX(title, popupRootId, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear) {
    var popupRoot = getElemById(popupRootId);
    popupShowCalendar(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear);
}

function popupShowCalendar(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear)
{


    today = new Date();
    dateNow = today.getDate();
    monthNow = today.getMonth();
    yearNow = today.getYear();

    if (yearNow < 1000)
    {
        yearNow += 1900;
    }

    yearButton = getElemById("spanYear");
    yearPopup = getElemById("datePickerYear");

    monthButton = getElemById("spanMonth");
    monthPopup = getElemById("datePickerMonth");

    // display todays date

    document.getElementById("CalToday").innerHTML =
    dayName[(today.getDay() - weekStartAt == -1) ? 6 : (today.getDay() - weekStartAt)] +
    ", " + dateNow + " " + fullMonthName[monthNow].substring(0, 3) + " " + yearNow;

    // Determin what seperator character is being used by the date format

    formatChar = " ";
    aFormat = ISODateFormat.split(formatChar);

    if (aFormat.length < 3)
    {
        formatChar = "/";
        aFormat = ISODateFormat.split(formatChar);

        if (aFormat.length < 3)
        {
            formatChar = ".";
            aFormat = ISODateFormat.split(formatChar);

            if (aFormat.length < 3)
            {
                formatChar = "-";
                aFormat = ISODateFormat.split(formatChar);

                if (aFormat.length < 3)
                {
                    alert("Invalid date format");
                    // invalid date format
                    formatChar = "";
                }
            }
        }
    }

    // See if there is a date in the id field already.

    tokensChanged = 0;

    if (formatChar != "")
    {
        // use user's date

        aData = getElemById(partnerKeyId).value.split(formatChar);

        for (i = 0; i < 3; i++)
        {
            if ((aFormat[i] == "d") || (aFormat[i] == "dd"))
            {
                dateSelected = parseInt(aData[i], 10);
                tokensChanged++;
            }
            else if ((aFormat[i] == "m") || (aFormat[i] == "mm"))
            {
                monthSelected = parseInt(aData[i], 10) - 1;
                tokensChanged++;
            }
            else if (aFormat[i] == "yyyy")
                {
                    yearSelected = parseInt(aData[i], 10);
                    tokensChanged++;
                }
                else if (aFormat[i] == "mmm")
                    {
                        for (j = 0; j < 12; j++)
                        {
                            if (aData[i] == fullMonthName[j])
                            {
                                monthSelected = j;
                                tokensChanged++;
                            }
                        }
                    }
        }
    }

    // If no valid date already in field, use todays date.

    if ((tokensChanged != 3) || isNaN(dateSelected) || isNaN(monthSelected) || isNaN(yearSelected))
    {
        dateSelected = dateNow;
        monthSelected = monthNow;
        yearSelected = yearNow;
    }

    constructCalendar();
    constructMonth();

    popupShow(title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear);
}

function initWindows(e) {

    document.body.onmouseup = stopMove;
    document.body.onmousemove = moveWindow;
    document.body.ondragstart = cancelEvent;
    document.body.onselectstart = cancelEvent;
}

// End of file
// start population functions

function showCriteriaTree(index, title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    setTempIndex(index);
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'criteriaSelected()', allowClear);
}

function setTempIndex(index) {
    var frm = document.forms['temp'];
    frm.index.value = index;
}

function getTempIndex() {
    var frm = parent.document.forms['temp'];
    return frm.index.value;
}

function criteriaSelected() {

    var frm = parent.document.forms['population'];
    frm.index.value = getTempIndex();
    frm.action = '?_target1=1';
    frm.submit();
}

function removeLine(criteriaIndex) {
    var frm = document.forms['population'];
    frm.index.value = criteriaIndex;
    frm.action = '?_target2=2';
    frm.submit();
}

function addLine() {
    var frm = document.forms['population'];
    frm.action = '?_target1=1';
    frm.submit();
}
// end population functions

// start formula functions
function addOperand() {
   submitFormToTarget('function', '_target7', '7', 'pgTarget');
}

function saveFormula() {
    submitFormToTarget('function', '_target9', '9', 'pgTarget');
}

function editFormula(index) {
    submitTabularReportForm(index, '6');
}

function showFormulaTree(index, title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    setTempIndex(index);
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear);
}


function removeOperand(criteriaIndex) {
    submitFormToTarget('function', '_target8', '8', 'pgTarget','selectedColumnIndex',criteriaIndex);
}

// end formula functions

// crosstab report functions
function showHideRows(tableId, linkElem) {
    var tableVar = getElemById(tableId);
    // get the rows for the table looking for class hideable
    var hideableClass = "hideable";
    var rows = tableVar.getElementsByTagName("tr");
    var i;
    var found = 0;
    for(i = 0; i < rows.length; i++) {
        var row = rows[i];
        if(row.className == hideableClass) {
            if(row.style.display == "none") {
                row.style.display = "";
                found = 0;
            } else {
                row.style.display = "none";
                found = 1;
            }
        }
    }

    // set the link text
    var child = linkElem.firstChild;
    if (child != null) {
        if(found == 0) {
            child.src = "../images/minus.gif";
        } else {
            child.src = "../images/plus.gif";
        }
    }
}

// end crosstab report functions

// start metric functions
function showMetricCriteriaTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear);
}

function showCountMetricCriteriaTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'metricCriteriaSelected()', allowClear);
}

function metricCriteriaSelected() {
    var frm = parent.document.forms['metric'];
    // get the hidden field representing the target to submit to
    var hidFld = getElemByIdAndDoc('pgTarget', parent.document);
    hidFld.name = "_target2";
    hidFld.value = "2";
    frm.submit();
}

// end metric functions

// start report functions
function showColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear, displayFieldId);
}

// end report functions

function submitFormToTarget(frmName, targetNme, targetVal, targetElemId, hidFieldId, hidFldVal, hidFldNme) {
    var frm = document.forms[frmName];
    var targetElem = getElemById(targetElemId);
    targetElem.name=targetNme;
    targetElem.value=targetVal;

    if (hidFieldId != null)
    {
        var target = getElemById(hidFieldId);
        if (target != null) target.value= hidFldVal;
        if (hidFldNme != null) target.name=hidFldNme;
    }

    frm.submit();
}

function handleWizardBack(frmName, targetId, targetVal, backElemId) {
    var frm = document.forms[frmName];
    var targetElem = getElemById(targetId);
    targetElem.name="_target" + targetVal;
    targetElem.value=targetVal;

    var backElem = getElemById(backElemId);
    backElem.name = "_back";
    backElem.value = "_back";

    frm.submit();
}

// start of tabular report functions

function showTabularColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, 'tabularColumnSelected()', allowClear, displayFieldId);
}

function showChartColumnTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, displayFieldId, allowClear) {
    popupShowServerTree(title, popupRoot, popupId, partnerValueId, partnerKeyId, null, allowClear, displayFieldId);
}

function tabularColumnSelected() {

    var doc = parent.document;

    var targetNme = '_target1';
    var targetVal = '1';
    var targetElemId = 'pgTarget';
    var formName = 'reports';

    var frm = doc.forms[formName];
    var targetElem = getElemByIdAndDoc(targetElemId, doc);
    targetElem.name=targetNme;
    targetElem.value=targetVal;
    frm.submit();
}

function appraisalReportColumnSelected(sourceId, targetId) {
    var sourceElem = getElemById(sourceId);
    var targetElem = getElemById(targetId);
    targetElem.value = sourceElem.value;
}

function addTabularReportFormula() {
    submitFormToTarget('reports', '_target5', '5', 'pgTarget');
}

function addTabularReportColumn() {
	submitTabularReportForm('0', '1');
}

function deleteTabularReportColumn(index) {
    submitTabularReportForm(index, '4');
}

function deleteChartReportColumn(index) {
    var indexField = getElemById('deletedColumnIndex');
    indexField.value= index;        
    submitFormToTarget('reports', '_target1', '1', 'pgTarget');
}

function submitTabularReportForm(index, pageTargetValue) {
    var indexField = getElemById('selectedColumnIndex');
    indexField.value= index;
    var pageTargetName = "_target" + pageTargetValue;
    submitFormToTarget('reports', pageTargetName, pageTargetValue, 'pgTarget');
}

function populateReportPdfFields(){
    var frm = document.forms['_reportpdfexport'];
    // if this is a drilldown report there is no population select so this is null.
    var elem1 = getElemById('pop2');
    var elem2 = getElemById('ob2');
    var elem3 = getElemById('so2');

    var field1 = getElemById('pop_id2');
    var field2 = getElemById('ob2');
    var field3 = getElemById('so2');

    // ignore setting this field if it is a drilldown report
    if (elem1 != null) {
        assignMultiSelectElem(elem1, field1);
    }

    // order by may be null
    var orderBy = null;
    try {
        orderBy = elem2.options[elem2.selectedIndex].value;
    } catch (e) {}

    if (orderBy != null) {
        field2.value = orderBy;
    }

    field3.value = elem3.options[elem3.selectedIndex].value;

    frm.submit();
}
function populateCsvFields() {
    var frm = document.forms['_csvexport'];
    // if this is a drilldown report there is no population select so this is null.

    var elem1 = getElemById('pop2');
    var elem2 = getElemById('ob2');
    var elem3 = getElemById('so2');

    var field1 = getElemById('pop_id1');
    var field2 = getElemById('ob1');
    var field3 = getElemById('so1');

    // ignore setting this field if it is a drilldown report
    if (elem1 != null) {
        assignMultiSelectElem(elem1, field1);
    }

    // order by may be null
    var orderBy = null;
    try {
        orderBy = elem2.options[elem2.selectedIndex].value;
    } catch (e) {}

    if (orderBy != null) {
        field2.value = orderBy;
    }

    field3.value = elem3.options[elem3.selectedIndex].value;

    frm.submit();
}

function assignMultiSelectElem(elem1, field1) {
    var output = "";
    for(var i = 0; i < elem1.options.length; i++)
    if(elem1.options[i].selected) {
        output += elem1.options[i].value + ",";
    }
    // delete the last ,
    if(output.length > 0) {
        output = output.replace(/,$/,"");
    }
    field1.value = output;
}

function selectTabularReportColumnColour(index) {
    submitTabularReportForm(index, '2');
}

function popUpShowColourPicker(title, buttonId, popupId) {
    var popupRoot = getElemById(buttonId);
    popupShow(title, popupRoot, popupId);
}

//title, popupRoot, popupId, partnerValueId, partnerKeyId, onSelFunc, allowClear
function popupShowBlog(title, buttonId, popupId, partnerValId, partnerKeyId) {
    var popupRoot = getElemById(buttonId);
    popupShow(title, popupRoot, popupId, partnerValId, partnerKeyId, null, false);
}

function saveColours() {
    submitFormToTarget('reports', '_target3', '3', 'pgTarget');
}

function saveComment(paragraphFieldId, textAreaElemId) {
    // prepend the saved info to the paragraph tag selected
    var textAreaElem = getElemById(textAreaElemId);
    var paragraphElem = getElemById(paragraphFieldId);
    paragraphElem.innerHTML="<strong>" + textAreaElem.value + "</strong>";
}

// functions used when displaying legend after running a tabular report
function popupShowColourLegend(title, prefix, columnId, popupId) {
    var popupRoot = getElemById(prefix + columnId);
    popupShow(title, popupRoot, popupId);
}

function submitLegendForm(columnLinkPrefix, columnLinkIdValue, activeTabFieldId, activeTabValue) {
    var columnElem = getElemById('colx1');
    columnElem.value=columnLinkIdValue;
    if(activeTabFieldId != null) {
        var activeTabElem = getElemById(activeTabFieldId);
        activeTabElem.value = activeTabValue;
    }
    var popupIdPrefix = getElemById('popupIdPrefix');
    popupIdPrefix.value=columnLinkPrefix;
    submitFormToTarget('runreport', '_target1', '1', 'pgTarget');
}

function submitChartToTarget(targetNum, formName, targetId) {
    submitFormToTarget(formName, '_target' + targetNum, targetNum, targetId);
}

function submitChartFormValues(frmName, hiddenFldId, hiddenFldValue, indexHiddenFldId, indexFldValue) {
    var frm = document.forms[frmName];
    var hiddenFieldElem = getElemById(hiddenFldId);
    hiddenFieldElem.value = hiddenFldValue;
    if(indexHiddenFldId != null) {
    var indexElem = getElemById(indexHiddenFldId);
    indexElem.value = indexFldValue;
    }
    frm.submit();
}

function handleReportPageSubmit(pgStartId, pgNum, frmName) {
    var pageStartFld = getElemById(pgStartId);
    pageStartFld.value = pgNum;
    var frm = document.forms[frmName];
    frm.submit();
}

// end of tabular report functions
var PORTFOLIO_ITEM_UPLOAD_TEXT = 'TEXT';
var PORTFOLIO_ITEM_URL = 'URL';
var PORTFOLIO_ITEM_UPLOAD = 'UPLOAD';
var PORTFOLIO_ITEM_NONE = '';

function onContentSubTypeSelect(selectId) {

    var selectDropDown = document.getElementById(selectId);

    for (var i = 0; i < selectDropDown.options.length; i++) {
        if (selectDropDown.options[i].selected) {
            var type = selectDropDown.options[i].value;
            activateSubTypeSelection(type);
            break
        }
    }

}

function activateSubTypeSelection(type) {
    var textElem = document.getElementById("portfolioItemText");
    var urlElem = document.getElementById("portfolioItemUrl");
    var uploadElem = document.getElementById("portfolioItemUpload");

    if (type == PORTFOLIO_ITEM_UPLOAD_TEXT) {
        textElem.style.display = '';
        urlElem.style.display = 'none';
        uploadElem.style.display = 'none';

    } else if (type == PORTFOLIO_ITEM_URL) {
        textElem.style.display = 'none';
        urlElem.style.display = '';
        uploadElem.style.display = 'none';

    } else if (type == PORTFOLIO_ITEM_UPLOAD) {
        textElem.style.display = 'none';
        urlElem.style.display = 'none';
        uploadElem.style.display = '';

    } else if (type == PORTFOLIO_ITEM_NONE) {
        textElem.style.display = 'none';
        urlElem.style.display = 'none';
        uploadElem.style.display = 'none';
    }

}function setSearchStarted(formName)
{
	var form = document.forms[formName];
	form.searchStarted.value = 'true';
}

function initiateSearch(formName)
{
	var form = document.forms[formName];
	form.search_initiated.value = 'YES';
}// Functions for tabs in browsing artefact views

    function concatActiveTab(actionTabFieldId, firstParam){
        var concatToAction = "";
        if (actionTabFieldId != null)
        {
           var actionTabField = getElemById(actionTabFieldId);
           if (firstParam == null )
           {
               concatToAction = "&";
           }
           concatToAction =  concatToAction + actionTabFieldId + "=" + actionTabField.value ;
        }
        return concatToAction;
    }

    function setHiddenFromSelect(selectField, hiddenFieldId, formName, actionTabFieldId) {
        var tempElement = getElemById(hiddenFieldId);
        tempElement.value = selectField.options[selectField.selectedIndex].value;
        var frm = document.forms[formName];
        frm.action="?_target1=1" + concatActiveTab(actionTabFieldId);
        frm.submit();
    }

    function setHiddenFromButton(hiddenFieldId, fieldValue, formName, valTarget , actionTabFieldId) {
        if (valTarget == null )
        {
            valTarget = "_target2=2";
        }

        setHiddenFieldValue(hiddenFieldId, fieldValue);

        var frm = document.forms[formName];
        frm.action = "?" + valTarget + concatActiveTab(actionTabFieldId);
        frm.submit();
    }


    function setHiddenFromList(nodeId, hiddenFieldId, formName, actionTabFieldId) {

        setHiddenFieldValue(hiddenFieldId, nodeId);
        var frm = document.forms[formName];
        frm.action="?_target4=4"+ concatActiveTab(actionTabFieldId);
        frm.submit();
    }

    function setTargetAndSubmit(target, formName, actionTabFieldId) {

        var frm = document.forms[formName];
        if (target == null)
        {
            frm.action = frm.action + "?" + concatActiveTab(actionTabFieldId,'first');
        }
        else
        {
            frm.action="?" + target + concatActiveTab(actionTabFieldId);
        }
        frm.submit();
    }

    function handleSearchSubmit(target, formName, actionTabFieldId) {

        var frm = document.forms[formName];
        if (target == null)
        {
            frm.action = frm.action + "?" + concatActiveTab(actionTabFieldId,'first');
        }
        else
        {
            frm.action="?" + target + concatActiveTab(actionTabFieldId);
        }
        return true;
    }

     function copyActionTabAndSubmit(formName, actionTabFieldId, actionTabCopyFieldId ) {

        var frm = document.forms[formName];
        var actionTabField = getElemById(actionTabFieldId);
        var actionTabCopyField = getElemById(actionTabCopyFieldId);

        if(actionTabCopyField && actionTabField) {
            actionTabCopyField.value = actionTabField.value;
        }
        frm.submit();
    }

    function setHiddenFromSelectAndSubmit(formName, selectElem, hiddenFieldId) {
        var frm = document.forms[formName];
        var hiddenFld = getElemById(hiddenFieldId);
        hiddenFld.value = selectElem.options[selectElem.selectedIndex].value;
        frm.submit();
    }

    function setHiddenFieldValue(hiddenFieldId, value) {
        var tempElement = getElemById(hiddenFieldId);
        if (tempElement != null) tempElement.value = value;
    }

var targetFieldId = 'tarId';

function respondNotification(notificationId) {
    var frm = document.forms[notificationId];
    frm.submit();
}

function respondNotificationWarning(notificationId, message) {
    confirmActionAndPost(notificationId, message);        
}

function postQuestionnaireTarget(formElement) {
    var frm = document.forms[formElement];
    frm.submit();
}

function setHiddenValuesAndPost(formName, targetElemId, targetElemValue, hidFieldId, hidFldVal) {
    var targetName = '_target' + targetElemValue;
    submitFormToTarget(formName, targetName, targetElemValue, targetElemId, hidFieldId, hidFldVal);
}

function handleDeleteImage(actionElemId, actionElemValue) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '10', actionElemId, actionElemValue);
}

function setSelectedEvaluatorAnswers(selectAnswerOptions) {
    var selectedValue = selectAnswerOptions.options[selectAnswerOptions.selectedIndex].value;
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '7', 'selGroupId', selectedValue);
}

function submitViewObjective(selectedObjectiveId) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '9', 'selObjectiveId', selectedObjectiveId);
}

function addDynamicLineItem(index) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '11', 'deleteImage', index);
}

function deleteDynamicLineItem(id, index) {
    setHiddenField('deleteImage', index);
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '12', 'dlId', id);
}

function addBlogComment(index) {
    setHiddenValuesAndPost('questionnaireForm', targetFieldId, '13', 'deleteImage', index);
}// javascript file to handle functions for the dynamic attributes

// enable a checkbox
function enable(selectElem, checkBoxId) {

    var checkBoxElem = getElemById(checkBoxId);
    if (selectElem.options[selectElem.selectedIndex].value == 'DATE') {
        checkBoxElem.disabled = false;
    } else {
        checkBoxElem.disabled = true;
        checkBoxElem.checked = false;
    }
}

function updateCalculation(displayElemId, tableId) {

    var spanElem = getElemById(displayElemId);
    var targetTable = getElemById(tableId);
    var output = "Formula: ";
    // get each of the rows
    var cols = targetTable.getElementsByTagName("TD");
    for (var j = 0; j < cols.length; j++) {
        var col = cols[j];
        var elems = col.getElementsByTagName("*");
        for (var k = 0; k < elems.length; k++) {
            var elem = elems[k];
            if (elem.nodeName == "SELECT") {
                var selectedText = elem.options[elem.selectedIndex].text;
                if (selectedText != 'Please Select') output += selectedText + " ";
            } else if (elem.type == 'text') {
                output += elem.value + " ";
            }
        }
    }
    spanElem.innerHTML = output;
}

function clearSelectTextValue(elem) {
    if (elem.nodeName == 'SELECT') elem.selectedIndex = 0;
    else if (elem.type == 'text') elem.value = '';
}

function toggleEnabled(elem1Id, elem2Id, elem3Id, otherCheckboxId) {
    // find the clicked element different for ie and firefox
    var evt = window.event || arguments.callee.caller.arguments[0];
    var clickedElem = evt.target || evt.srcElement;

    var clickedElemName = clickedElem.name;
    // get the last character of the name it will give us the index to append
    var nameLength = clickedElemName.length - 1;

    var postFix = clickedElemName.charAt(nameLength);

    var other = getElemById(otherCheckboxId + postFix);
    other.checked = !clickedElem.checked;
    
    var elem1 = getElemById(elem1Id + postFix);
    var elem2 = getElemById(elem2Id + postFix);
    var elem3 = getElemById(elem3Id + postFix);

    elem1.disabled = !elem1.disabled;
    elem2.disabled = !elem2.disabled;
    elem3.disabled = !elem3.disabled;

    if (elem1.disabled) clearSelectTextValue(elem1);
    if (elem2.disabled) clearSelectTextValue(elem2);
    if (elem3.disabled) clearSelectTextValue(elem3);
}

function addRow(tableId, numExpFldId) {

    var tblBody = getElemById(tableId).tBodies[0];

    var hiddenElem = getElemById(numExpFldId);
    var index = hiddenElem.value;

    var newRow = tblBody.rows[0].cloneNode(true);

    // loop through the cells
    var newTds = newRow.getElementsByTagName("TD");

    // must match numCells and the length of new names
    for (var i = 0; i < newTds.length; i++) {
        var newTd = newTds[i];
        var cellElems = newTd.getElementsByTagName('*');
        for (var j = 0; j < cellElems.length; j++) {
            var currentElem = cellElems[j];
            if (currentElem.nodeName == 'INPUT' || currentElem.nodeName == 'SELECT') {
                // get the name and change the number to the index
                var currentElemName = currentElem.name;
                var currentElemId = currentElem.id;
                currentElem.setAttribute("name", currentElemName.replace('0', index));
                currentElem.setAttribute("id", currentElemId.replace('0', index));

                if (currentElem.nodeName == 'SELECT') {
                    currentElem.options[0].selected = 'true';
                    var formatSel = 'formatSelId' + index;
                    currentElem.disabled = (currentElem.id == formatSel);

                } else if (currentElem.type == 'text') {
                    currentElem.value = '';
                    currentElem.disabled = true;

                } else if (currentElem.type == 'checkbox') {
                    currentElem.checked = currentElem.id != ('txtChoice' + index);
                }
            }
        }
    }
    tblBody.appendChild(newRow);
    hiddenElem.value = parseInt(index) + 1;
}

// removes the last row in a table
function removeRow(tableId, numExpFldId) {

    // should have found the corrent element now
    var tableElem = getElemById(tableId);

    var rows = tableElem.getElementsByTagName('TR');
    var lastRowIndex = rows.length;
    if (lastRowIndex > 2) {
        tableElem.deleteRow(lastRowIndex - 1);
        // decrement the hidden elements value
        var hiddenElem = getElemById(numExpFldId);
        var index = hiddenElem.value;
        hiddenElem.value = parseInt(index) - 1;

    } else {
        alert("must have at least 2 attributes");
    }
}var popupId = 'helpText';
var popupTitleId = popupId + 'Title';
var popupIFrameId = popupId + 'Iframe';
var popupContentIFrameId = popupId + 'contentIframe';
var popupHiddenField = popupId + 'Field';
var textAreaElementId = 'helpTextAreaElementId';
var editing = false;
var itemIdElem = null;

var noHelpTextMessage = null;

var helpTextCallback = function(helpTextItem) {
    
    var divElem = getElemById(popupId + "Content");    
    var message;
    if(helpTextItem == null) {
        message = noHelpTextMessage;
    } else {
        message = helpTextItem.helpText;
    }
    if (editing) {
        var textElem = getElemById(textAreaElementId);
        textElem.value = message;
    } else {
        divElem.innerHTML=message;
    }
}

function showHelpText(itemId, noValueMessage, editVar) {
    editing = editVar;
    itemIdElem = itemId;
    noHelpTextMessage = noValueMessage;
    helpTextBean.getHelpTextItem(itemId, helpTextCallback);
}

function showHelpTextPopup(title, popupRoot) {
    popupShow(title, popupRoot, popupId);
}

function saveHelpText() {

    if(itemIdElem != null) {
        var textElem = getElemById(textAreaElementId);
        helpTextBean.setHelpText(itemIdElem, textElem.value);
        // now clear the text area
        textElem.value = "";
    }
}

function closePopup() {
    if (editing) {
        var textElem = getElemById(textAreaElementId);
        textElem.value = "";
    } else {
        divElem.innerHTML="";
    }
}

function markMessageAsRead(url, messageId) {
    // call the update and submit to the url
    messageItemBean.setMessageItemRead(messageId);
    window.location.href = url;
}

function confirmDeleteMessages(frmName, message) {

    var elems = document.getElementsByName("m_ids");
    var count = 0;
    for(var i = 0; i < elems.length; i++) {
        if(elems[i].checked) count = count + 1;
    }
    if (count > 0) {
        confirmActionAndPost(frmName, message);
    } else {
        alert("Please select the items to be deleted");
    }
}// objective specific functions

function addObjective() {
    var frm = document.forms['objsetfrmid'];
    var target = getElemById('targetId');
    target.name = "_target2";
    target.value = "_target2";
    frm.submit();
}

function removeObjective(objectiveIndex) {
    var frm = document.forms['objsetfrmid'];
    var target = getElemById('targetId');
    target.name = "_target3";
    target.value = "_target3";

    var deleteElem = getElemById('deleteIdx');
    deleteElem.value = objectiveIndex;
    frm.submit();
}

function submitCancel() {
    var frm = document.forms['objsetfrmid'];
    var hiddFld = getElemById('cancelId');
    hiddFld.name = "_cancel";
    hiddFld.value = "_cancel";
    frm.submit();
}

function hideElement(elemId) {
    var doc = parent.document;
    if (!doc) doc = document;
    var hiddenElem = getElemByIdAndDoc(elemId, doc, true);
    hiddenElem.style.display = 'none';
}

function showElement(hiddenDivId) {
    var doc = parent.document;
    if (!doc) doc = document;
    var hiddenElem = getElemByIdAndDoc(hiddenDivId, doc, true);
    hiddenElem.style.display = "inline";
}

function confirmSetValueAndSubmit(frm, message, hiddenFldId, value, finishFieldId) {
    var confirmed = confirm(message);
    if (confirmed == '1') {
        getElemById(hiddenFldId).value = value;
        if(finishFieldId) {
            var finishField = getElemById(finishFieldId);
            finishField.name="_finish";
            finishField.value="_finish";
        }
        document.forms[frm].submit();
    }
}

function setParentObjectiveInfo(listElementId, hiddenFieldId, targetAreaId, itemId) {
    // find the objective
    var listElem = getElemById("ab" + listElementId);
    var description = listElem.innerHTML;

    var hiddenField = getElemById(hiddenFieldId);
    hiddenField.value = listElementId;

    var targetAreaElem = getElemById(targetAreaId);
    targetAreaElem.innerHTML = description;

    var hiddenDescElem = getElemById(targetAreaId + "a");
    hiddenDescElem.value = description;
}

function swapLiStyle(elem, borderStyleName) {
    elem.style.borderStyle = borderStyleName;
}

function updateNumberField(targetId, sourceId) {
    var source = getElemById(sourceId);
    var target = getElemById(targetId);
    var num = target.innerHTML;
    if (num) {
        target.innerHTML = parseInt(num) + parseInt(source.value);
    } else {
        target.innerHTML = parseInt(source.value);
    }
}

var approveObjectiveCallback = function(success) {
    if (success) {
        alert("Successfully updated objective");
    } else {
        // display some error message
    }
}

/*
* approves an objective, will have a callback to determine success or failure this will load the td with the status field
*/
function approveObjective(itemId, message) {
    // call out to the confirm
    var confirmed = confirm(message);
    if (confirmed == '1') {
        objectivesBean.approveObjective(itemId, approveObjectiveCallback);
    }
}

/*
 * submits the form when an organisation unit has been selected/changed so the correct objectives can be loaded and displayed. 
*/
function ouObjectivesSubmit() {
    document.forms['viewOuObjectives'].submit();
}

function clearObjectiveTextFields(hiddenFieldId, parentTableId, blogCommentFieldId, index) {

    var hiddenFld = getElemById(hiddenFieldId);
    var blogCommentFld = getElemById(blogCommentFieldId);
    var blogCommentHiddenFld = getElemById(blogCommentFieldId + "a");

    hiddenFld.value = "";
    blogCommentFld.innerHTML = "";
    blogCommentHiddenFld.value = "";
}

function addSelected(targetSelectElemId, sourceSelectId) {

    var targetSelectElem = getElemById(targetSelectElemId);
    // get the multiselect element
    var sourceSelectElem = getElemById(sourceSelectId);
    var opts = sourceSelectElem.options;
    for (var i = 0; i < opts.length; i++) {
        var selectElem = opts[i];
        if (selectElem.selected) {
            // loop through the target elements options so we do not duplicate entries
            var hasEntry = false;
            for (var x = 0; x < targetSelectElem.options.length; x++) {
                if (targetSelectElem.options[x].value == selectElem.value) {
                    hasEntry = true;
                    break;
                }
            }
            if (!hasEntry) targetSelectElem.options[targetSelectElem.options.length] = new Option(selectElem.text, selectElem.value);
        }
    }
}

function assignSelectedToAll(selectId, targetTblId) {

    var tble = getElemById(targetTblId);
    var allSelectBoxes = tble.getElementsByTagName("SELECT");

    for (var i = 0; i < allSelectBoxes.length; i++) {
        addSelected(allSelectBoxes[i].id, selectId);
    }
}

function removeSelected(targetSelectElemId, sourceElemId) {

    var sourceSelectElem = getElemById(sourceElemId);
    var childElems = sourceSelectElem.options;

    var selectElem = getElemById(targetSelectElemId);
    // remove the selected options
    for (var i = 0; i < selectElem.options.length; i++) {
        var selectedOption = selectElem.options[i];
        if (selectedOption.selected) {
            // uncheck the checkbox
            for (var j = 0; j < childElems.length; j++) {
                if (childElems[j].value == selectedOption.value) childElems[j].selected = false;                
            }
            selectElem.options[i] = null;
            i--;
        }
    }
}

function removeAllSelections(tbleId, divId) {

    clearSelections(tbleId);
    clearCheckedAssessors(divId);
}

// clears all options from all select boxes within the given table given by the tbleId (table id)
function clearSelections(tbleId) {

    var tble = getElemById(tbleId);
    var allSelectBoxes = tble.getElementsByTagName("SELECT");

    for (var i = 0; i < allSelectBoxes.length; i++) {
        var selectElem = allSelectBoxes[i];
        clearOptions(selectElem);
    }
}

// removes all options from a select box the selectElem being the element not an ID
function clearOptions(selectElem) {

    for (var j = 0; j < selectElem.options.length; j++) {
        selectElem.options[j] = null;
        j--;
    }
}

function clearCheckedAssessors(divId) {

    var selectElem = getElemById(divId);
    var childElems = selectElem.options;

    for (var k = 0; k < childElems.length; k++) {
        childElems[k].selected = false;
    }
}

function saveAssessors(tbleId) {

    // get all the select boxes
    var tble = getElemById(tbleId);
    var selectElems = tble.getElementsByTagName("SELECT");


    for (var i = 0; i < selectElems.length; i++) {
        var users = new Array();
        var selectElem = selectElems[i];
        var selectedElemName = selectElem.name;

        var objectiveId = selectedElemName.substring(selectedElemName.lastIndexOf("_") + 1, selectedElemName.length)

        for (var j = 0; j < selectElem.options.length; j++) {
            var opt = selectElem.options[j];
            var userId = opt.value;
            users.push(userId);
        }

        objectivesBean.saveAssessors(objectiveId, users);
    }
}

// called when the popup is closed in order to reset the assessors information
// targetTableId the table containing the list of selected assessors for each objective
// the hidden field that contains the objectiveSet from which we access the current set of objectives
function resetAssessors(targetTableId, objSetFieldId, userSelectorDiv) {

    var tble = getElemById(targetTableId);
    clearCheckedAssessors(userSelectorDiv);

    // get all the select elements
    var selectElems = tble.getElementsByTagName("SELECT");
    // the select element's name is post-fixed with the objective id
    var i = 0;

    for (; i < selectElems.length; i++) {

        var selectElem = selectElems[i];
        clearOptions(selectElem);
        var objectiveId = selectElem.name.substring(objSetFieldId.length);

        objectivesBean.findAssessors(objectiveId, function(str) {

            var index = 0;
            for (var prop in str) {
                var userObjIdArray = prop.split(':');
                var userId = userObjIdArray[0];
                //var foundElem = getElemById(objSetFieldId + userObjIdArray[1]);
                var elemName = objSetFieldId + userObjIdArray[1];
                var foundElem = document.getElementsByName(elemName)[0];
                foundElem.options[index] = new Option(str[prop], userId);
                index++;
            }
        });
    }
}